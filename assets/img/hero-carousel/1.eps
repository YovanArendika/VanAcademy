%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/18/2022
%%BoundingBox: 0 0 1012 400
%%HiResBoundingBox: 0 0 1011.1116 400
%%CropBox: 0 0 1011.1116 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 6283 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDA5FF7D2752FD18FF
%A87D7DFD62FFF8F8F8A8FD13FF7D527DA87DF8F87DFD0CFFA87DA8A8FD15
%FF7DA8FD20FF7D52277DFD14FF52FD04F87DFD11FFA827FD04F826F8F8A8
%FD0AFFA827F8F8F827FD13FFA8F8F8F8277DFD1DFF52FD04F827A8FD11FF
%A8F8F8267527FD12FFA8FD05F827277DFD0BFF27F8F8F82775FD13FFF8F8
%F84BF87DFD1DFF262627F8F8F852FD11FFF8F8F87599A7FD12FFA84B4AFD
%04F8277DFD0AFFA8FD04F84B9AA8FD11FF27F8F8759A4BA8FD1DFF6F9AFD
%05F8A8FD10FF764B759999A1FD13FF9A9A759A26F8F8F87DFD09FF52204B
%7575C275CAFD11FF7C269A999A99A7FD1CFFCA9A999A2627F8F827FD10FF
%6F9AC2C26FC3FD12FFCA7599C2999A26F8F87DFD09FF52209A9AC26F9AC9
%FD11FF7675BC9A99BCA0FD1CFFCA6F9ABCC26F4BF8F8A8FD0FFFCAC2C29A
%C2C3FD13FF9A7599C2994BF8F87DFD09FF27F84BC2BC9ABCFD13FFC3C275
%C2C3FD1DFFCA9A6FC29A9A20F8F8A8FD10FFC96F999AFFCAFD11FFCFC399
%9A9920F8F8F827A8FD08FF27F8F86F9A6F75A8FD0DFFCAC9CFFFFFFF9A9A
%99CAFD08FFA9FD14FF7D4A9A9975FD04F852FD0EFFCFFFC37520A0C2C9FD
%13FF76759A272E2727F8F87DFD07FF27F827C2BC9A51A9FD0CFFCAC29ACF
%CACAA8A14B76A8FD07FFA8FD15FF52276FC27627F8F8F87DFD0CFFCAA0C8
%C1C8999A99A0A0C9FD0EFF76C9A87E76A0765A535A5328F8F8A8FD05FFCF
%593561A0C8C2C8596184A9A8FFFFFFA8FF85A8C1C26F996F9A7677767D77
%7DA1FD05FFA9A9FD14FFA853287752532F2F05F87DFD0BFFC9C2C8C2C9C9
%C3C2C2A0C9C2C9FD0CFFA1756F9A76C9C87D537E535A5452F8FD06FFAF60
%615A84C2C95A845A615A6160847D8560615AC9C29A76A1777D77A1777D77
%7D77A8FFFFC3C3CAFD14FF59285328532F532E532EFD0BFFCAC1C8A0C9C9
%C9A1C2BCC2A0C8C1CAFD0AFFA9A16F9A9AC2A0C85353535A537E5352FD05
%FF8536605A605AA77D615A615A8436605A835A605A617DC27777767D7777
%767D7677767D767DA19A6F9ACAFD12FF7D2853282F2853282F282F53FD0A
%FFC2C8C2C8C9C9C2C9C29A75C8C2C8C2FD0AFF7E53A1BBC2C2C8A07E535A
%535A7D5A7EFFA8FFFFAF5A615A615A615A615A615A857D605A615A605A61
%607E77A1777D77A177A177A177A176A177A1759AA0FD12FF7E525328532F
%5328532F53282F7EFD08FFC9C2A0C2A0C8A0C8A0C9A0C2C2C8A0C2C9FD08
%FF7E2F5476C299C2767D2F5453532F77537EA8AFFFAF36605A605A605A60
%5A605A60368459605A605A60367E7677767D7677767D7EA88484597E7EA9
%84A199CAFD11FF7E2853282F2853282F2853282F282FA8FD06FFCFC8C29A
%BCC8C2C9C2C8C8C9C8C9C2C9C8C9CFFD07FF535A53599AC2775A535A535A
%537E537D53A9FFFF846160615A8560615A8560615A6160845A8560615A7E
%77A177A177A177A1A1A17D6160605A616061A1C2CAFD10FF84285353532E
%532F532E532F532E53287EFD06FFCFC19999C8C2C8A0C8C2C8A0C9C9CFCA
%CAA8A8A8FFA8CBA8CBA87E2F535377535AFD06532F5353537EFFFF605A60
%5A605A605A605A605A605A847D605A605A5A767D7D7E777D76779A9A99A1
%5A6036605A605A7D76A1FFA97EA984857E857E857E85A9FFFF7E4C2F2853
%282F2853282F2853282F282F53FD06FFC9C8C2C8C2C8C2C8C2C8C2C8C2C8
%C8C9A2A9A8A8A2CBA8A8A2A8A253535A535A535A535AFD0553A87DA8FFFF
%5A615AA87D845A615A615A615A615A845A605A857DA17D7E7E7E777E77C2
%9976BBA136605A615A85777D76A8FF857E857F857E857E855AA9A8592853
%2F2F52532F5328532E5352532F532853A9FD05FFC89FC8A0C8A0C8A0C8A0
%C8A0C8A0C8C2A77EA8A2A8A8A8A2A87EA8FD0C532F7E7DA27DFFA8605A60
%59847D8459845A83A0845A5A7EAF84AF7E77777D767D777D77A0BBC2997D
%5A5A36605A60597D7DA27DFF84A97E847E7E5A857E855A5A282F282F2853
%282F2853285352535253282F28A9FD05FFC2C8C2C8C2C9C2C8C2C9C2C8C2
%C9C2C8A1A9A8A8A2FFA8A8A8A9A87E535A537D535A535A537E535A53A87D
%A8FFFF60615A6160615A8560617DC8A0C3BCC2C3FFFFA877A177A177A177
%A1A0C2BBA861615A6160615A8477A8FFFFA8FFA8FFA8A27E857F857E857E
%532853535352FD05532F5328532F532E53A8FD05FFC8A0C8C2C8A0C8C2C8
%A0C8C2C8A0C8C2C97EA8A2A8A8A9A2A8A2A85353535AA07D2F5A53532F54
%53537DA27EFFFF855A605A605A605A6136A7C1C2BCC29999A1FFFD047776
%7D777776C2BBA05A615A5A36605A6053A2A8FFA8FFA8CBA8FFA2A87E857E
%855A8553769A9A9AC29A53282F2853282F2853282F28A9FD05FFC9C8C2C8
%C2C8C2C8C2C8C2C8C2C8C2C8C2A8A2A8A8A9FD05A87E535A53C9C27D535A
%537EA8A9A8FFA8FFFFFFA9855A615A615A615A617DC8C2C2C29A4BC3CBA2
%77A1777D77A1777D76A15A615A615A605A61607DA2FD08FFCBA2A87E8585
%857F85779A6F9AC2C252532F5328532F5328532E53A9FFFFA8FFA8FFA0C2
%9FC8C2C9A8CFA8CAA0C8C1C29FC8A2A87EA8A2A87DA8A2A8A2A9A8A8A8CF
%A8A9A8A8A8FFA8FFA8FFA8FFA8CB7E60366036605A6036A7C1C3A0C39AA8
%CAFFA87E7DFD04A8CBA8A8A8603660365A3660366084C9A0C9A7FFA8FFCA
%FFA8FFCACF5A7E5A7E5A7E76769AC299532853282F2853282F282F7DFFA8
%FFFFA8FFFFFFC9C9C9CFA9FFFFFFA9FFCACAC9CAC9A8A2A8A2A8A8A8A2A8
%A2A9FFFFCBFFFFFFCBFD08FFCB7DA27DA8A885608560615A85A7C9A8FFA8
%FFA9FFCBFFA8A9FFFFCBFD05FF608560855A85608560FFCAC9C8CFCFFFCF
%FFCAFFCFFFCA7E597E537E5A7E7EC9CAC94C2F282F2853282F28537EFFA9
%FFCBA8FFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA9FFA9FFA8A8A8A9A8A8A8A9
%A8A8A8FFA8FFA8FFA8FFA8FFA8CBA8FFA8CBFD05A8FFCAFFA8AFA8AFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8CFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA87E53595359537E
%7DA8A8FFA8FFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD1C
%FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-18T19:32:13+03:00"
   xmp:ModifyDate="2022-04-18T19:32:13+03:00"
   xmp:MetadataDate="2022-04-18T19:32:13+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:ff4d75bd-c7e5-694a-99d9-f1b2ca76248a"
   xmpMM:InstanceID="xmp.iid:ff4d75bd-c7e5-694a-99d9-f1b2ca76248a"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2204.w037.n003.316B.p1.316</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="104"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUF&#xA;retaVoek3Wr6tcpZ6bZRma6uZK8URe9BUk9gAKk7DFXyn+ZX/OYPmCHza0PkT6pL5dtQnC4uYHZ7&#xA;tiAzkq5jeNK/ABQN370Cr6r0DUzquhadqhiMBv7WG5MJ3KGaNX4n/V5UxVHYq7FXYqlnmXzLonln&#xA;RLrW9culstMs1DT3D1IFSFUAKCzMzEAACpOKvGLf/nM38qpNR+rSWmqwWpbiL54Iig3oWKJM0nH5&#xA;KT7Yql3lT/nJrzP5g/OiHyfDotsPLt3cyQ2soE31z0VjaSO5Ll/TKOi+pQR/ZP2u5AkCLCSCOb6L&#xA;wodiqWeY/Mug+WtHn1jXb2PT9NtgDLcSk0BJoFUAFmYnoqgk4q8xsf8AnK78nr3U4NPivbtWuJBE&#xA;lw9q6xAswUMxPxKvevHYdcVew4q7FXYq7FVG9vbSxs5728mS3tLaNpri4kYKkcaAszsx2AUCpOKv&#xA;JrH/AJys/Ju61qfTf0jPbwQqWXVJ4GS1kIIHGPczVNdqxjFXrdrc291bRXVtIs1vOiywyoaq6OOS&#xA;sp7gg1xVUxV2KuxV2KuxV2KsZ8/fmP5R8h6ONU8yXgt4pGKW0CDnPO43KxRjdqdz0HcjFXl3l3/n&#xA;MX8s9V1mPT7y1vtIt5m4RahdrEYQT09X03cxj33A7nFXuyOkiK6MHRwGVlNQQdwQRireKuxV2KvB&#xA;f+crtP8AMer6XoOiaRqxsIb6Wdby0ZpEiuiPTMKSNGr/AGWDEBvhqfHjlOXOIc3K02kll5EB5p5C&#xA;/KbT9JOlaZr9rZ6qLvUIJr1+AYqqVLQ1ZOfplU61FW2pQ5r/AM3xZARYDuv5N8PCYmjI733bfc+x&#xA;QAoAAoBsAOgGbZ5t2KuxV2KvN/8AnIXy/p+uflZqdrfTPbxRPDcLNGAxX0pAWJU/aAj5GmVZsnDG&#xA;3I02EZJ0eW75N8y/kbcwW13qen3yRQLMfStLqkXwO4VCJCVX9qnEivzO2YeLXAkAh2mo7HIBlE7X&#xA;yKYf849fmI/lf8zNJ0fUdGtri4vJU0E6g/qfXLf1rhlUI3No6erIFb4K8QBUd86AHMdd3TTsGjzG&#xA;z7qybB2KvlL/AJyxn1HzJ5/0fydDc+jp+nacdUmSjNymmlaLaNfikZUjXiFqfiagrsa8uTgFt+nw&#xA;HJKmEeUvyim0Fmvb+9tLu9vIJILK2QycaTcUMq19N34xuWZQtfvzXZdZx7AEAO703Zfh7yIJkKA9&#xA;77esZzPZW856yxI5r1+JQe2bOErALoMsOGRj3FWyTB2KuxV4r/zlVB5kvfJNhpGj3wtYNTvBBqMH&#xA;EkzxBTIiBlV2HxoKioB/aPGuVZcohzcjBppZTs8S0/8AJrSbXRrnQ7hFudRuS0r6s8agxRqjrGYQ&#xA;HLikgXktd671pmtlrSZCXTud9DsqMYGB3kf4vur4vsDye1q3lTR/qkEtraiygW3trgUljjWNVVZB&#xA;/MAN82sJcQt53Lj4JGPcm+Sa3Yq7FXYq7FXYq8U/5yF0TS9V1Xyy15ai7exW+9GN+Ppq88aujvy+&#xA;HiDanrtWmYOszGOwNO37M0wncpC+g99W+UPOP5Ta7oE1xMrwzWCRtcQ/vFExiShkHpE8j6Qb4iNv&#xA;vpk8OrjP3tWq7MniJO3Dz8/wH1D/AM4h/mJceYvIs/l2/l9S+8tNHDA7H4mspQfQHv6ZRk9l45lu&#xA;te84q7FVskkcSNJIwRFFWZjQAfM4JSAFnkkRJNBi3mfUtA1HT5rYcZ7oIwtpCpASRhSoZqUzV6nW&#xA;4Jjhuz0dtocGbHMS5R6+54t5Q1q/h80ST65pMUcEJWKxuuYiluJCyyW8LBg1V4uxfi32gRTvmMOC&#xA;FHc1vTupnJOwQIA7cXWvd+3YvoXRtVi1GzSUMnrgD14lJ+Bj23ofpzbabUxyxsHd5bU4DjlXToj8&#xA;yHHdirTMqqWYhVUVZjsABikC2KeYNa8ma75blR9ZtBaTiscxkRgSp6cK1au4plMsYzxMY83Mwznp&#xA;picht9h+L531RNcXy5dw6QILG9knElu93O9+3JnDM7s6yhPgWiD4vopmDptHLJl4T0+DuNVrhjw3&#xA;Eiydt+I/HuePf4N89+WdZtPM9uIdQvtOuo9QWSNmlPrQyCZWdHEbOOa70zeS0k4jk8x4okd32T+R&#xA;v512f5n6NezGy/RuraW8aX1oJPVQrKCY5Y2IU8WKMOJG1OpzHZPTMVfIP/OQPkzzrrf54T3vl1Xt&#xA;vq1paKdTMhhSNzGagOPiY0O4UHY79cthppZRVbNOTWxwG7qXlzZZqHlbza8MAs7mymuYYwYJ723M&#xA;vCf0+Hqxyq6la+6E79abZy0cuMSIlY33/se2nlkcYlAxJrax18i900jzd5euLeKIXCWkqKFa3lPD&#xA;iQKcQzfCfvzqfy8hEEC49KeH/OQlIiRqV73tunkcscq843V1PRlII+8ZWRTeCDyULrU9OtATc3Mc&#xA;RH7LMAx+S9T9GJBAJ6BHELAvcsN80/mVDp5t4bEUadghmkQsakmgRB9o0Un5Zqp9oiX939rvdL2U&#xA;CDLJ8AOq2f8AMvyLqVpHFdJLcQSJyDyQUoSv8rHmj/RUZmisgoxNebijBkxHijIA9wJv47fe8z8u&#xA;Xsa+a4murQJpjzo11eeqzVRNlJhK8UqAOdG2HdqDMTH2dLiF8g7XP2kOA0KlId/6H0FZ3tleQiaz&#xA;njuIegeJg6/Kq1zZPNEEc27y7jtLdppAW3CpGv2ndjxVFrTdiaYQLQVSL1fST1Qol4j1AtSvKm9K&#xA;70rgVdirsVdirsVfN/51a/eal+Zf6HSHT77RLK0tyxvJikcd9FNI7glBJyYI6goVpUD3ynU6Schx&#xA;gH4Ow7P1cYk45cPCd/VysPMvzUuPM+rQpY6VfW0lnLABqEcShS7hywRJGDNxpSvxiv00yOi7MkBx&#xA;EUelt3anaYkeCMrjW9J1/wA4X2WqWv5h+YIpomihj0vjcIwYUlNxGYv8ndQ9PwzJlEg0XUA2+w8C&#xA;XYqwHzVrwubtofVCWkLcUFaBmHVvf2zme0NScs+EfSHodBpOGN16il1vcxRxepEA8r9GYAqF9q9S&#xA;36sw4T4OX1OVOBJo8mO63Y31rNBLp1o1zBcSqvwuq+ipPxli259PwG5qPoyriRd0D+KczHqbFH6u&#xA;vu7/AMdWSaVqFzYXEVwh+NQBIvZh+0uY2DOcU+KLg58MckTEvSba4iubeOeI1jkUMp+eddjmJxEh&#xA;yLzE4GJIPMKmTYvOvzX89Wun2U2gW49a8vIyl3RmURQuKEckIbm69KHYb5kYtJ4sTewRHP4cgRvT&#xA;zLSdItoo5pg5mS8ANW2Yqw/3YVIWRh0DleVOpOcxklLFkr+KB+57fDjhlx3zjMff3958+av501W0&#xA;uY7a2tZVkCMzSBT0IAC/rObj2e0c8ZlOYIsCr/HueX7XzxlUYm6JtjVssDXMS3BZYC6iVkALhCfi&#xA;KgkAmnTfOmkaBLpoiyA9D/IPy/o2inzPrVoh/SWpT2sM0GwjBHIRlfDnJIxf5VzV6rGOKxyLfAmq&#xA;PR6X5y8z/oazWOChvrioiruEUdXI/Vg02DjO/IONrdV4UaH1F5TNNLNK8szmSVyWd2NSSe5JzcAA&#xA;Cg86ZEmyrNfSm1Fueg/a70HQZq4dk446k5+p6eZ5l2k+18ktMMHQdfIcgor8cnxk1bbl7+JzNmPD&#xA;h6B9PTy7h+hwsZ8SfrP1dfPvP6XRtwepHYgj5imSyw44bHuN/G2OKfhz3HeK94pTZ1RSzGgG5OWS&#xA;IA35MMcJSkBHmlur6mNQkgdok5WwYRTFQZBzFHIbqvIDcDOWxaDHjnIx5E7eT6Jjz5DCIl9VboDM&#xA;ximg8t616PqCJeBHKnrRcv8AgefL8MnwS7i435vDf1RRHl2PzNbXQu9IYwSKaFnkjiVt+jCVlVhi&#xA;ccu4olqsJG8o/NH32seernzhboDLA8ksZQR+lcQB2XixhZLklKgkfEtBXwzRZ/EjkI3BPIWf7Hda&#xA;YYZ4QQIygOZofHcG/se4oGCKGbkwABalKnxoM2webPNvFDsVdirzn82PzMj8uW66RpsoOuXY+J1I&#xA;P1aI9ZCN/jI+wPp+eRgw8W55MJS3p80zStLM8rElpGLMSSTUmvU5tAKcQmyswqzD8sPPc3lDzAJ2&#xA;+LTL0pFqUYFSUUnjIvflHzYgd6kZRnwiY82cJ0X1bHJHJGskbB43AZHU1BBFQQc1LloXWLo2umXM&#xA;4NGVCEPgzfCv4nMfVZODFKXk3afHx5APN4/LoktxrIvrm4L28S0t7ZaqoJHxF6H4j4eH05ywygRo&#xA;Dd6wZKGybAACg2A6DKWtVilVAQ0ayAmtGLbf8Cy5KMq6WxlG+tIhbnTvS4mz/e/z+o/E7/y7dvfM&#xA;7SDFOYjKPPzLi5/EjEyEvsTCz8zXVpEIYIY1iUkhPiI369TnUY9PGAqOwdHkkZmyd0Vd+a9RSYoF&#xA;j47EUBHUfPLOAMOF5J+ZsSSanDerGsb3wKzBejMpqzGu9SpzY6WXprucbPGix4ahdra/VVekXt1o&#xA;e1fDAdDiOXxSPV+N24a/KMXhA+n8be5COgam9GH2WHUZluE6zW4nu47duCc2VeW/RjSoyMjQtMRZ&#xA;eq/lpZtp3mARu3rJdMHVVHHjLHHIoc1rUBJX2+ntmsy5LiB3OYYbkqvnq5efzPdhieMXCJAewCg/&#xA;8SJOZ+lFYw85r5XmKStBtVHVx8wD9xOQhq96lGUfgSPnX7O4rPR7XCUZfEA/In9veFvpSVA4mrEA&#xA;fM5adTjomxsLPuDSNNksDhPqND3l0kUkT8JBxbwxwaiGWPFA3Fc+nyYpcExUkwPl7XJn9SKwneOX&#xA;40ZUJUg7j4htleDJGOOMTIWAA3Z8GSWSUhE0STy72O6wJo72SympE0BKygmtHHUHjXp0zG1GYTNA&#xA;7O+7K0XhR45D1n7AhHW0ZF4PwcbNyqVPuKCoykiBGx3dnEzB3FhfBZSSRyMjJyG0bMpdSep+ENHX&#xA;b3zVa/UnGRGJ3dvoNMMgMiPmjNPlvWsla9j9K4UfGPh3p3+EuB8q5sex82SVgg8PPiN7n4vLe0um&#xA;wwoxkBkG3AK2HfQ5b96vbikK/Kv35vXkhyWW19rEOqpLpiPJNassiiNC/Sn2gB07ZpNXhicxl1D2&#xA;/ZWQx0ggTUZWfteoal5l1V7ezvLMSxpcxAy2oVOcUg+0rq8bt8j3y7TY8cgeKr8/7XD1HHE+nceS&#xA;TT+cPMiScfrLReCSRxcv+Ta/qzLjp8J7vn+1xjky+fy/Yp/4z8yf8tn/ACTi/wCaMs/J4u772H5i&#xA;feg/O/51vo+lwWen25fXbiKsk8i0hi3K8lH7bGlQOg7+GYf5KpG/pckZ7j5vC7u/l1DWWvZ5ZJpb&#xA;mQPNJKSzEtTlUmtadBmTVRpbBnsl+WNSIitHLD1R6aEGjOQvbalaV3yBn3NkcZ67KUsMkTBZBQkV&#xA;HQgjpUEbHJAgsJRI5vqj8nNVk1H8vNKeVuUtsr2rH2hcog/5F8c1WojUy5WM3FkGuGK70m4gjcGR&#xA;lBUUO5Vg1Pppmv1mIzxSiObl6XIIZAS8+6ZyL0yvb2N3cKWhiLqOp6D8cvxaXJkFxFtOTPCH1Gmp&#xA;7O6t/wC+jZK9CRt9/TBl0+TH9QITjzQn9JtRHXBgnwzjLuIZZI8USPJfWnXO6eZRF2ysIXBHxIAf&#xA;mMAVjfmzQdQ1e2t0sITPcQyFuAKg8CpBPxEd6ZkafIIndpzRJGyA0X8u9bkt7yLULNoC6p9XcshI&#xA;YV3oGP05jdoavJGcJYhxVfEPLZt0mKBjIZDXKkom8g+bISediQoNA5kjAPyqwzZx1MCLtwjilaf6&#xA;d+VGoOsE82p21s7ASENUhSCDx5DauVT1Y5UzGEs88v8Al1NL1KO9k1CzmMYYKglpuw41qQexzAkb&#xA;cklJ/PenJ9ffVIZ4ZUuCokiif1CjBQtTQDY0+/Nho8tjh7nQ9paYg+J0LFczXVKtr/vTD/rr+vMT&#xA;tD/F8n9SX3FzOz/8Yx/14/eEXqVrcSXXJI2Kla86fDQdST0oO+efYRIwro+t4DAC9uL7U3/Kx/Ni&#xA;anfzS2cn6Bb93AaqOUqk1dOZj5LxC7j9rkKmgzb6CEhv/CXUdr5ISsH648vx8ixPUvLevnV54Z4A&#xA;b6SVmePmtSznlsSQDWubinXRyxp3+CPNP/Vvf/go/wDmrAy8aPeiU0DXrG1L3Vk0cKH45SyUAY0G&#xA;wJPU5hT7O8fKN6BcmXbUdPpyQOKQ5KE5pC/yp9+dTjgIRERyD5xmyyySM5fVI2fi3GKIo8AMkwDL&#xA;/JWmWenJdXWqSy2V9cOREF4MGtyFKmnGTq1c53VavHCZ4iA9tp8M5YoiIsCI+bNEtIXUMtzeFWFQ&#xA;fSTcH/nlgGUEWP0sTEjuSXzD5cF00U0Au7iYfCwdAFC9eyp3yyOYD+wrwk/2himq6fcaY6fW0Nuk&#xA;tfR9QgcuNOVN+3IZudNqRkHmOexH3uqz4DA+XwYp5r0yw1O0SQ0mmtTySOORUZ1P2lqa/PJagSMD&#xA;wkA/NOlMRMcYJj5bJJpmh6fc3U6nTAlnCQq3HKVSJABVQxarmtfiUBfAtvTj82v1Ef4j8h+p7fB2&#xA;dpp/wCvef17/AHe9jvmKFNO1aW1s/wBzCoUoF+0OSgkcz8R3983/AGdlOXCJT3O/3vOdp4hhzmEN&#xA;o7fd380oJJNSak9Tme61rCr6i/JmzfS/IFjFeAxTztJcGJgahZHPCu3dQD9OarUm5mnLxiosu/Rj&#xA;f78H3ZTbZahJ5etZH5usbP3Yp1+eUT0+ORsxBLbHUTiKBNKy6VxUKrhVHQBaDLhQFBqMidy2dLJF&#xA;C4IPUEYk2oKj/h60rX04q+PprlP5fF/Nj8g2/mMn84/NAP5JsnPxTyda0+Gn6syONr4nN5IsmQIZ&#xA;WoK02Tv/ALHHjXiVrTypBazLLHO5ZQRRqUNRTsBiZrxI/wDRjf78H3YLRba6fOhrHP6bdKhQdv8A&#xA;ZVwWq76rf/8ALa3/AAEf/NONhUJqegNqduLe7uneIMGACou49wtcIlSgoC08iabbTiZXZyARxfdS&#xA;CKGo2rh4ypNii3P5C0OZixhVGP8AIWUfcGplw1cx1cOWhwn+F0PkLQ4mDLECw3BZnP8AxtTI5NRK&#xA;cTE8iyxaTHCQlEbhMYtCihjEcT+mgNaKWHX5HMbFjjjFRFBzZ5ZTNy3K79Dn/fz/APBP/wA1ZZbC&#xA;1NPLtok5uFVBOa1l41bfr8R3x4ltX/Rjf78H3Y2tqN3oMF3A0FwRJE1CyEEVoajocMchibDDJCMx&#xA;UhYS9/IGgOpVrdSD13cfqbLvzWTvcY6HCf4fvb/wHoX/ACzp97/81YPzWTvT+Sw/zUbN5ctZyplC&#xA;sVFAaEGn0HMHNp8eQ3IWXYYtROAqJoIhNMkjQIlw6qoooDPsP+CyQwxAoX8z+tBykmzXyDf6Pn/5&#xA;aZP+Df8A5qw+HHz+Z/WjxD5fIJbq/kzStY9L9Jp9b9Dl6XqNIePOnKnxd+Iy7FMw+lrnUuaX/wDK&#xA;q/KH/LBH/wAFJ/zXlv5qfex4I9yMsPIeg2Apa20cY5FuJ5MORFK0Zm7DKMp8Qgy3puxZJYwRE1bE&#xA;/Mn5D6LrWqSagt/LZtKFDQxopjHFQPhB3HTLsGbw48MRs1Z7yy4pGylif8426MGHPWLgr3AjQH79&#xA;8u/OHuavBDItC/JLybpEqzrE17cIapLeH1KH2QBI/vXKp6mUmcccQzL9GN/vwfdlNtlo/IodirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdir//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:1e649ee1-42f5-9e46-b821-eeb901c4b494"
    stRef:documentID="xmp.did:1e649ee1-42f5-9e46-b821-eeb901c4b494"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1e649ee1-42f5-9e46-b821-eeb901c4b494"
      stEvt:when="2022-04-18T19:32:10+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:ff4d75bd-c7e5-694a-99d9-f1b2ca76248a"
      stEvt:when="2022-04-18T19:32:13+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1011.111500"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
1011.11 400 li
1011.11 0 li
cp
clp
1011.11 400 mo
-8.22831e-06 400 li
-8.22831e-06 0 li
1011.11 0 li
1011.11 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
326.47 137.121 mo
330.154 136.746 333.921 137.61 336.885 139.83 cv
339.482 141.774 341.936 144.967 342.718 150.195 cv
344.594 162.745 340.032 166.091 347.063 170.968 cv
354.093 175.845 358.199 173.062 362.428 184.805 cv
366.657 196.549 359.343 211.97 344.978 208.467 cv
330.613 204.964 295.826 194.564 295.826 194.564 cv
295.457 142.772 li
313.098 138.48 li
326.47 137.121 li
cp
0 0 0 rgb
f
290.575 183.186 mo
290.575 183.186 274.869 185.432 264.7 203.919 cv
254.532 222.405 245.994 273.376 247.551 274.985 cv
249.109 276.596 283.028 281.424 311.148 281.424 cv
339.268 281.424 348.081 280.352 350.792 278.741 cv
353.504 277.132 352.806 190.109 337.234 183.186 cv
321.664 176.263 307.284 177.65 290.575 183.186 cv
cp
.407843 .462745 .666667 rgb
f
286.668 184.01 mo
286.668 184.01 261.993 222.693 257.12 247.725 cv
252.246 272.756 251.299 290.474 251.299 290.474 cv
340.957 291.029 li
342.561 222.93 li
333.099 182.594 li
306.952 179.046 li
286.668 184.01 li
cp
.968627 .701961 .411765 rgb
f
286.668 184.01 mo
286.668 184.01 274.083 230.582 271.425 246.852 cv
268.768 263.121 268.218 278.67 268.218 278.67 cv
251.767 276.213 li
258.049 238.026 li
280.501 189.166 li
286.668 184.01 li
cp
.407843 .462745 .666667 rgb
f
280.634 146.491 mo
280.634 146.491 273.951 135.041 274.611 130.199 cv
276.241 118.26 293.24 110.371 309.879 116.418 cv
326.517 122.465 329.438 143.385 326.598 152.394 cv
319.284 175.592 299.091 166.986 299.091 166.986 cv
299.091 166.986 267.534 160.32 280.634 146.491 cv
cp
0 0 0 rgb
f
285.633 171.561 mo
285.656 171.996 li
286.4 180.184 li
286.957 186.605 li
286.957 186.605 286.477 188.126 293.943 187.295 cv
303.948 186.144 306.984 181.684 306.984 181.684 cv
306.717 166.583 li
303.701 167.304 li
285.633 171.561 li
cp
.956863 .517647 .384314 rgb
f
285.656 171.996 mo
286.4 180.184 li
291.25 179.367 300.029 176.846 303.261 169.01 cv
303.508 168.374 303.666 167.804 303.703 167.335 cv
285.681 171.87 li
285.656 171.996 li
cp
0 0 0 rgb
f
280.666 132.875 mo
280.666 132.875 272.316 154.667 276.232 166.514 cv
280.147 178.36 290.995 175.967 297.43 173.346 cv
303.866 170.725 306.718 166.573 306.718 166.573 cv
306.718 166.573 312.924 168.363 316.75 162.492 cv
320.576 156.621 317.759 150.211 314.2 148.876 cv
310.642 147.542 306.608 150.252 306.608 150.252 cv
309.575 143.894 li
309.575 143.894 294.438 112.974 280.666 132.875 cv
cp
.956863 .517647 .384314 rgb
f
286.668 184.01 mo
286.668 184.01 264.448 184.891 245.836 201.871 cv
227.225 218.852 200.249 260.4 211.123 275.178 cv
227.093 296.883 261.458 290.247 261.458 290.247 cv
263.049 254.929 li
272.306 203.666 li
286.668 184.01 li
cp
.407843 .462745 .666667 rgb
f
282.866 159.943 mo
282.601 159.943 282.353 159.78 282.255 159.517 cv
280.607 155.039 283.572 150.237 283.699 150.035 cv
283.89 149.73 284.29 149.639 284.596 149.83 cv
284.9 150.021 284.992 150.422 284.802 150.727 cv
284.774 150.771 282.052 155.196 283.477 159.067 cv
283.601 159.404 283.428 159.779 283.091 159.903 cv
283.017 159.93 282.941 159.943 282.866 159.943 cv
cp
0 0 0 rgb
f
308.008 160.19 mo
307.86 160.19 307.71 160.14 307.587 160.036 cv
307.313 159.803 307.28 159.393 307.513 159.118 cv
312.989 152.665 li
313.221 152.392 313.632 152.357 313.907 152.59 cv
314.181 152.823 314.214 153.233 313.981 153.508 cv
308.505 159.961 li
308.376 160.112 308.193 160.19 308.008 160.19 cv
cp
f
314.063 158.219 mo
314.042 158.219 314.021 158.218 313.999 158.216 cv
309.955 157.82 li
309.597 157.785 309.335 157.467 309.37 157.109 cv
309.405 156.751 309.729 156.485 310.082 156.524 cv
314.126 156.92 li
314.484 156.956 314.745 157.274 314.71 157.632 cv
314.677 157.968 314.394 158.219 314.063 158.219 cv
cp
f
287.682 164.2 mo
288.541 164.7 289.875 165.201 291.089 164.511 cv
292.246 163.854 292.968 162.8 293.39 161.962 cv
287.682 164.2 li
cp
289.784 166.16 mo
287.709 166.16 285.98 164.597 285.886 164.511 cv
285.721 164.359 285.646 164.133 285.687 163.912 cv
285.728 163.691 285.88 163.508 286.089 163.426 cv
294.292 160.21 li
294.517 160.122 294.773 160.167 294.956 160.325 cv
295.139 160.483 295.218 160.73 295.163 160.966 cv
295.132 161.095 294.388 164.134 291.731 165.643 cv
291.075 166.016 290.413 166.16 289.784 166.16 cv
cp
f
295.427 143.644 mo
295.204 143.644 294.985 143.528 294.864 143.32 cv
293.784 141.47 291.2 142.134 291.091 142.163 cv
290.746 142.256 290.387 142.05 290.294 141.703 cv
290.201 141.357 290.404 141 290.75 140.906 cv
290.899 140.865 294.404 139.948 295.989 142.665 cv
296.17 142.975 296.065 143.374 295.754 143.555 cv
295.651 143.615 295.539 143.644 295.427 143.644 cv
cp
f
278.848 142.052 mo
278.679 142.052 278.51 141.987 278.383 141.857 cv
278.131 141.601 278.135 141.19 278.391 140.938 cv
278.46 140.87 280.093 139.282 281.956 139.403 cv
282.864 139.467 283.646 139.919 284.279 140.748 cv
284.498 141.033 284.443 141.442 284.158 141.66 cv
283.872 141.879 283.463 141.824 283.245 141.539 cv
282.844 141.014 282.394 140.74 281.868 140.702 cv
280.59 140.601 279.315 141.854 279.303 141.867 cv
279.176 141.991 279.012 142.052 278.848 142.052 cv
cp
f
280.26 151.142 mo
280.24 151.142 280.219 151.141 280.199 151.139 cv
279.841 151.105 279.578 150.788 279.611 150.43 cv
279.959 146.714 li
278.537 145.133 li
278.297 144.866 278.318 144.454 278.586 144.214 cv
278.852 143.975 279.265 143.995 279.505 144.263 cv
281.118 146.056 li
281.239 146.191 281.299 146.371 281.282 146.552 cv
280.907 150.551 li
280.876 150.889 280.592 151.142 280.26 151.142 cv
cp
f
292.122 151.467 mo
291.715 151.438 291.446 151.126 291.473 150.768 cv
291.747 147.083 li
289.653 145.229 li
289.384 144.991 289.359 144.58 289.598 144.311 cv
289.836 144.041 290.248 144.017 290.517 144.255 cv
292.851 146.323 li
293.003 146.458 293.083 146.656 293.068 146.858 cv
292.771 150.864 li
292.745 151.206 292.46 151.467 292.122 151.467 cv
cp
f
317.855 129.821 mo
317.855 129.821 315.573 104.203 333.062 106.991 cv
351.589 109.945 334.102 139.515 322.259 137.896 cv
316.987 137.175 317.855 129.821 317.855 129.821 cv
cp
f
288.885 226.694 mo
288.885 226.694 282.946 195.591 279.885 192.223 cv
276.823 188.855 256.678 179.961 254.112 182.409 cv
251.546 184.856 254.156 187.93 254.156 187.93 cv
254.156 187.93 250.327 185.742 248.884 188.033 cv
247.442 190.324 250.237 193.885 250.237 193.885 cv
250.237 193.885 247.183 191.962 247.588 196.225 cv
247.993 200.487 256.355 208.288 256.355 208.288 cv
256.355 208.288 256.837 217 262.192 226.364 cv
267.548 235.729 283.851 236.147 283.851 236.147 cv
288.885 226.694 li
cp
.956863 .517647 .384314 rgb
f
270.175 196.42 mo
270.074 196.42 269.971 196.397 269.875 196.347 cv
253.908 188.019 li
253.589 187.852 253.466 187.459 253.632 187.141 cv
253.799 186.822 254.192 186.697 254.51 186.864 cv
270.477 195.192 li
270.795 195.359 270.919 195.752 270.753 196.07 cv
270.637 196.293 270.41 196.42 270.175 196.42 cv
cp
0 0 0 rgb
f
265.859 204.317 mo
265.741 204.317 265.622 204.285 265.515 204.218 cv
249.892 194.437 li
249.587 194.246 249.495 193.845 249.686 193.54 cv
249.875 193.235 250.277 193.142 250.583 193.333 cv
266.205 203.114 li
266.51 203.305 266.603 203.707 266.412 204.012 cv
266.288 204.209 266.076 204.317 265.859 204.317 cv
cp
f
290.493 188.454 mo
288.233 188.454 286.725 188.213 286.56 188.186 cv
286.206 188.126 285.966 187.791 286.026 187.436 cv
286.084 187.082 286.413 186.843 286.775 186.901 cv
286.881 186.919 297.584 188.615 305.659 182.511 cv
305.946 182.294 306.354 182.352 306.57 182.638 cv
306.787 182.925 306.73 183.333 306.444 183.549 cv
300.974 187.684 294.533 188.454 290.493 188.454 cv
cp
.27451 .345098 .517647 rgb
f
262.192 238.026 mo
262.192 238.026 288.812 294.14 329.824 291.029 cv
370.836 287.919 367.74 215.68 354.86 197.371 cv
341.98 179.063 323.696 179.296 323.696 179.296 cv
306.952 226.364 li
293.251 214.689 li
262.192 238.026 li
cp
.407843 .462745 .666667 rgb
f
306.952 179.046 mo
306.952 179.046 283.938 280.035 288.36 280.561 cv
292.782 281.085 327.757 282.78 327.757 282.78 cv
323.696 179.296 li
306.952 179.046 li
cp
f
326.47 137.771 mo
326.132 137.771 325.847 137.511 325.821 137.169 cv
324.987 125.978 317.605 121.822 317.531 121.782 cv
317.215 121.609 317.099 121.214 317.271 120.898 cv
317.444 120.583 317.838 120.466 318.155 120.639 cv
318.484 120.819 326.233 125.182 327.119 137.072 cv
327.146 137.431 326.877 137.743 326.519 137.77 cv
326.502 137.771 326.486 137.771 326.47 137.771 cv
cp
.968627 .701961 .411765 rgb
f
332.848 250.845 mo
332.689 250.845 332.53 250.786 332.404 250.67 cv
299.248 219.758 li
298.985 219.512 298.971 219.101 299.216 218.838 cv
299.461 218.574 299.873 218.561 300.136 218.805 cv
333.292 249.717 li
333.555 249.963 333.569 250.374 333.324 250.637 cv
333.196 250.774 333.022 250.845 332.848 250.845 cv
cp
.27451 .345098 .517647 rgb
f
321.795 237.426 mo
327.149 238.774 336.178 240.488 339.07 238.571 cv
339.564 238.243 339.835 237.826 339.896 237.294 cv
339.933 236.97 339.843 236.729 339.603 236.518 cv
337.639 234.777 328.664 235.97 321.795 237.426 cv
cp
334.635 240.718 mo
328.269 240.718 319.404 238.139 318.909 237.992 cv
318.626 237.909 318.434 237.646 318.441 237.352 cv
318.449 237.057 318.654 236.804 318.94 236.735 cv
320.781 236.293 337.032 232.502 340.466 235.543 cv
341.025 236.038 341.275 236.694 341.189 237.442 cv
341.083 238.366 340.612 239.111 339.789 239.657 cv
338.626 240.427 336.771 240.718 334.635 240.718 cv
cp
f
291.788 124.083 mo
291.788 124.083 289.052 127.433 288.557 132.928 cv
288.063 138.424 288.063 138.424 288.063 138.424 cv
310.688 145.62 li
311.418 134.602 li
291.788 124.083 li
cp
0 0 0 rgb
f
289.81 127.684 mo
289.81 127.684 287.765 129.382 286.804 131.698 cv
285.843 134.015 284.782 138.636 284.782 138.636 cv
278.202 137.737 li
279.234 126.238 li
288.266 121.004 li
293.628 121.737 li
292.616 129.136 li
289.81 127.684 li
cp
f
477.058 179.566 mo
477.058 179.566 502.545 189.036 526.538 190.5 cv
547.31 191.768 575.451 182.034 575.451 182.034 cv
592.122 218.166 li
592.122 218.166 537.952 261.711 504.382 243.419 cv
461.099 219.835 477.058 179.566 477.058 179.566 cv
cp
.407843 .713726 .847059 rgb
f
531.378 193.468 mo
531.085 197.17 531.013 202.905 532.631 204.563 cv
532.934 204.874 533.274 204.998 533.688 204.955 cv
534.063 204.916 534.299 204.77 534.452 204.479 cv
535.354 202.769 533.32 197.445 531.378 193.468 cv
cp
533.534 206.265 mo
532.837 206.265 532.207 205.994 531.698 205.473 cv
528.909 202.611 530.155 192.299 530.307 191.132 cv
530.343 190.852 530.556 190.627 530.833 190.576 cv
531.115 190.521 531.391 190.658 531.524 190.905 cv
532.124 192.011 537.334 201.803 535.604 205.086 cv
535.247 205.764 534.631 206.166 533.823 206.25 cv
533.726 206.26 533.629 206.265 533.534 206.265 cv
cp
.968627 .701961 .411765 rgb
f
577.908 185.32 mo
577.908 185.32 582.711 175.129 589.529 171.516 cv
596.348 167.902 603.829 166.259 601.676 170.345 cv
599.522 174.431 593.974 180.656 593.974 180.656 cv
604.988 180.199 li
604.988 180.199 612.47 178.556 617.687 178.339 cv
622.904 178.122 623.649 182.088 623.649 182.088 cv
623.649 182.088 628.867 181.871 630.688 183.793 cv
632.511 185.716 630.303 188.472 630.303 188.472 cv
630.303 188.472 637.342 190.178 633.478 195.001 cv
629.612 199.824 613.602 205.817 606.121 207.46 cv
598.64 209.104 582.905 207.759 582.905 207.759 cv
582.905 207.759 568.517 207.709 577.908 185.32 cv
cp
.956863 .517647 .384314 rgb
f
615.542 196.191 mo
615.392 196.191 615.24 196.14 615.117 196.034 cv
599.229 182.352 li
598.957 182.118 598.927 181.707 599.161 181.434 cv
599.396 181.161 599.807 181.131 600.079 181.366 cv
615.967 195.047 li
616.239 195.282 616.27 195.693 616.035 195.965 cv
615.906 196.115 615.725 196.191 615.542 196.191 cv
cp
0 0 0 rgb
f
579.14 194.22 mo
578.79 194.22 578.502 193.944 578.489 193.592 cv
578.477 193.233 578.758 192.932 579.116 192.919 cv
584.896 192.714 588.904 191.219 591.03 188.475 cv
593.267 185.588 592.575 182.3 592.567 182.267 cv
592.49 181.916 592.712 181.569 593.063 181.491 cv
593.415 181.418 593.761 181.636 593.839 181.987 cv
593.874 182.146 594.665 185.909 592.06 189.272 cv
589.685 192.336 585.346 194.001 579.163 194.22 cv
579.155 194.22 579.147 194.22 579.14 194.22 cv
cp
f
585.174 221.559 mo
565.349 186.089 li
564.836 185.173 565.164 184.014 566.081 183.502 cv
574.433 178.833 li
575.349 178.321 576.508 178.649 577.02 179.566 cv
596.846 215.035 li
597.357 215.952 597.03 217.11 596.113 217.623 cv
587.762 222.291 li
586.845 222.803 585.687 222.476 585.174 221.559 cv
cp
.968627 .701961 .411765 rgb
f
656.044 177.949 mo
656.044 177.949 658.587 178.584 659.193 179.535 cv
659.799 180.485 659.634 184.259 659.634 184.259 cv
659.634 184.259 685.613 186.766 711.846 216.424 cv
738.387 246.429 741.814 264.38 733.041 277.463 cv
721.451 294.745 681.564 290.079 681.564 290.079 cv
681.564 290.079 671.951 291.491 637.724 290.968 cv
606.102 290.484 588.464 290.079 588.464 290.079 cv
588.464 290.079 533.996 303.206 538.336 267.142 cv
544.091 219.31 601.481 188.625 612.576 184.259 cv
622.592 180.316 631.747 180.215 631.747 180.215 cv
631.747 180.215 632.246 178.375 632.793 178.057 cv
635.717 176.358 656.044 177.949 656.044 177.949 cv
cp
.639216 .482353 .564706 rgb
f
946.109 122.165 mo
946.109 122.165 971.311 150.272 966.024 182.336 cv
961.252 211.288 918.563 198.705 918.563 198.705 cv
898.157 193.866 li
898.157 193.866 891.102 176.839 901.443 160.435 cv
911.784 144.031 946.109 122.165 946.109 122.165 cv
cp
0 0 0 rgb
f
956.782 289.151 mo
956.782 289.151 955.338 189.766 950.011 183.919 cv
944.684 178.073 912.132 171.891 893.385 185.88 cv
881.652 194.636 878.118 234.827 881.652 260.095 cv
884.714 281.993 885.948 290.426 885.948 290.426 cv
956.782 289.151 li
cp
.27451 .345098 .517647 rgb
f
103.749 179.814 mo
103.749 179.814 83.0703 178.495 71.2319 189.087 cv
59.3931 199.678 53.3569 289.179 53.3569 289.179 cv
53.3569 289.179 86.6401 289.731 108.296 290.348 cv
124.05 290.796 152.254 289.179 152.254 289.179 cv
152.254 289.179 143.33 197.524 138.179 186.329 cv
133.029 175.132 103.749 179.814 103.749 179.814 cv
cp
.968627 .701961 .411765 rgb
f
461.853 117.639 mo
461.853 117.639 437.03 110.636 426.354 135.121 cv
415.677 159.605 424.161 227.007 424.161 227.007 cv
479.32 216.371 li
472.52 162.067 li
461.853 117.639 li
cp
0 0 0 rgb
f
450.118 175.317 mo
450.118 175.317 417.326 183.938 412.058 200.48 cv
406.791 217.022 429.661 286.513 436.809 289.39 cv
443.957 292.267 504.742 289.179 504.742 289.179 cv
504.742 289.179 508.875 240.737 507.982 234.829 cv
507.09 228.92 503.52 205.284 496.942 194.856 cv
490.365 184.428 472.804 176.375 465.48 175.822 cv
458.156 175.269 450.118 175.317 450.118 175.317 cv
cp
.407843 .713726 .847059 rgb
f
1011.11 300.545 mo
-8.22831e-06 300.545 li
-8.22831e-06 277.895 li
1011.11 277.895 li
1011.11 300.545 li
cp
.921569 .909804 .933333 rgb
f
444.947 161.98 mo
445.334 179.505 li
445.334 179.505 448.606 184.473 458.876 185.08 cv
466.527 185.532 469.172 183.746 469.172 183.746 cv
467.911 174.894 li
466.67 166.262 li
448.068 162.599 li
444.947 161.98 li
cp
.956863 .517647 .384314 rgb
f
448.068 162.599 mo
448.123 163.076 448.317 163.637 448.615 164.278 cv
452.729 172.946 463.492 174.597 467.911 174.894 cv
466.67 166.262 li
448.068 162.599 li
cp
0 0 0 rgb
f
469.696 126.231 mo
469.696 126.231 479.378 148 476.022 160.288 cv
472.666 172.575 461.479 170.718 454.777 168.392 cv
448.075 166.064 444.945 161.984 444.945 161.984 cv
444.945 161.984 438.713 164.143 434.498 158.363 cv
430.282 152.583 432.81 145.896 436.366 144.345 cv
439.922 142.793 444.18 145.34 444.18 145.34 cv
440.815 139.017 li
440.815 139.017 454.586 106.682 469.696 126.231 cv
cp
.956863 .517647 .384314 rgb
f
444.18 145.34 mo
444.18 145.34 453.563 147.263 460.116 136.834 cv
466.669 126.407 466.083 122.115 466.083 122.115 cv
472.549 132.919 li
472.549 132.919 474.023 125.445 471.047 120.669 cv
468.07 115.893 464.962 116.872 464.962 116.872 cv
444.247 121.981 li
438.746 138.557 li
444.18 145.34 li
cp
0 0 0 rgb
f
429.616 184.01 mo
429.616 184.01 381.022 207.894 386.474 254.35 cv
391.923 300.779 450.211 294.227 472.02 289.179 cv
493.828 284.131 476.819 250.997 476.819 250.997 cv
476.819 250.997 468.579 253.872 447.425 250.265 cv
426.271 246.657 429.616 184.01 429.616 184.01 cv
cp
.407843 .713726 .847059 rgb
f
416.197 240.556 mo
414.997 240.556 413.816 240.788 412.697 241.335 cv
411.715 241.813 411.542 242.164 411.559 242.259 cv
411.817 243.771 420.537 245.743 429.143 246.874 cv
426.628 244.675 421.245 240.556 416.197 240.556 cv
cp
431.06 248.419 mo
431.035 248.419 431.01 248.417 430.984 248.414 cv
426.271 247.866 410.846 245.818 410.275 242.479 cv
410.053 241.177 411.613 240.415 412.125 240.165 cv
420.474 236.09 431.079 246.854 431.526 247.314 cv
431.718 247.512 431.765 247.809 431.644 248.056 cv
431.533 248.279 431.305 248.419 431.06 248.419 cv
cp
.968627 .701961 .411765 rgb
f
472.02 133.611 mo
471.968 133.611 471.917 133.605 471.866 133.593 cv
469.848 133.103 li
469.499 133.019 469.284 132.667 469.369 132.317 cv
469.454 131.967 469.811 131.753 470.155 131.838 cv
472.172 132.328 li
472.522 132.413 472.737 132.765 472.652 133.114 cv
472.58 133.412 472.313 133.611 472.02 133.611 cv
cp
0 0 0 rgb
f
459.923 135.582 mo
459.669 135.582 459.428 135.432 459.324 135.183 cv
459.184 134.852 459.339 134.47 459.671 134.331 cv
464.363 132.36 li
464.693 132.221 465.075 132.377 465.214 132.708 cv
465.354 133.04 465.199 133.421 464.867 133.561 cv
460.175 135.531 li
460.093 135.566 460.007 135.582 459.923 135.582 cv
cp
f
469.649 152.552 mo
469.487 152.552 469.325 152.492 469.199 152.371 cv
468.939 152.122 468.93 151.71 469.179 151.45 cv
472.214 148.286 468.422 142.522 468.383 142.465 cv
468.184 142.166 468.264 141.762 468.562 141.562 cv
468.859 141.363 469.264 141.441 469.465 141.74 cv
469.647 142.011 473.878 148.432 470.119 152.352 cv
469.991 152.485 469.82 152.552 469.649 152.552 cv
cp
f
444.254 155.371 mo
444.103 155.371 443.952 155.319 443.829 155.212 cv
436.423 148.808 li
436.152 148.573 436.122 148.162 436.357 147.89 cv
436.593 147.618 437.003 147.588 437.275 147.824 cv
444.68 154.228 li
444.952 154.463 444.982 154.874 444.747 155.146 cv
444.618 155.295 444.437 155.371 444.254 155.371 cv
cp
f
436.343 155.658 mo
436.097 155.658 435.862 155.518 435.752 155.28 cv
435.602 154.954 435.745 154.567 436.071 154.417 cv
441.446 151.936 li
441.768 151.785 442.159 151.927 442.309 152.254 cv
442.459 152.581 442.317 152.967 441.991 153.118 cv
436.616 155.598 li
436.528 155.639 436.435 155.658 436.343 155.658 cv
cp
f
444.767 177.126 mo
444.767 177.126 442.692 177.338 442.447 178.639 cv
442.202 179.94 450.247 202.126 456.522 204.117 cv
462.798 206.108 467.706 186.508 468.004 186.841 cv
468.303 187.175 479.552 195.532 480.761 195.264 cv
481.969 194.997 476.756 185.373 473.477 181.593 cv
470.198 177.813 468.126 176.402 468.126 176.402 cv
468.126 176.402 468.518 180.985 468.485 181.964 cv
468.453 182.943 464.564 185.109 457.661 183.994 cv
447.787 182.399 444.767 177.126 444.767 177.126 cv
cp
.968627 .701961 .411765 rgb
f
461.037 145.027 mo
460.706 145.027 460.422 144.775 460.39 144.438 cv
459.961 139.983 li
459.94 139.764 460.032 139.548 460.205 139.411 cv
462.75 137.392 li
463.029 137.168 463.441 137.214 463.665 137.498 cv
463.888 137.779 463.841 138.188 463.559 138.412 cv
461.291 140.211 li
461.685 144.313 li
461.72 144.671 461.458 144.989 461.1 145.024 cv
461.079 145.026 461.058 145.027 461.037 145.027 cv
cp
0 0 0 rgb
f
472.71 143.698 mo
472.379 143.698 472.096 143.446 472.064 143.109 cv
471.635 138.654 li
471.615 138.441 471.7 138.232 471.863 138.094 cv
473.799 136.46 li
474.074 136.229 474.486 136.263 474.716 136.538 cv
474.949 136.813 474.914 137.223 474.639 137.455 cv
472.963 138.869 li
473.359 142.984 li
473.394 143.342 473.131 143.66 472.774 143.695 cv
472.752 143.697 472.732 143.698 472.71 143.698 cv
cp
f
506.614 241.551 mo
506.59 241.551 506.566 241.549 506.542 241.547 cv
506.184 241.507 505.926 241.186 505.965 240.828 cv
509.178 211.552 496.179 202.427 496.047 202.339 cv
495.75 202.138 495.669 201.733 495.87 201.436 cv
496.071 201.137 496.471 201.058 496.771 201.257 cv
497.335 201.634 510.566 210.833 507.261 240.971 cv
507.224 241.304 506.941 241.551 506.614 241.551 cv
cp
.968627 .701961 .411765 rgb
f
461.502 250.833 mo
461.485 250.833 461.467 250.832 461.45 250.83 cv
431.008 248.416 li
430.65 248.388 430.382 248.074 430.411 247.716 cv
430.439 247.357 430.74 247.076 431.111 247.119 cv
461.553 249.533 li
461.912 249.562 462.179 249.875 462.15 250.233 cv
462.124 250.574 461.838 250.833 461.502 250.833 cv
cp
f
460.666 156.977 mo
460.839 157.898 461.341 159.256 462.793 159.712 cv
464.239 160.167 465.418 159.296 466.073 158.616 cv
460.666 156.977 li
cp
463.619 161.146 mo
463.235 161.146 462.829 161.088 462.403 160.954 cv
459.249 159.964 459.27 156.221 459.273 156.062 cv
459.276 155.857 459.375 155.667 459.54 155.546 cv
459.704 155.426 459.917 155.391 460.112 155.449 cv
467.373 157.649 li
467.568 157.708 467.724 157.855 467.794 158.046 cv
467.865 158.237 467.842 158.451 467.733 158.622 cv
467.658 158.74 466.092 161.146 463.619 161.146 cv
cp
0 0 0 rgb
f
827.783 248.605 mo
827.783 248.605 845.268 236.206 855.682 227.421 cv
866.096 218.637 888.918 186.452 898.157 182.897 cv
907.396 179.342 887.475 265.988 887.475 265.988 cv
887.475 265.988 859.28 287.638 838.452 275.716 cv
817.624 263.793 827.783 248.605 827.783 248.605 cv
cp
.27451 .345098 .517647 rgb
f
136.648 184.091 mo
136.648 184.091 148.155 189.973 163.244 218.16 cv
177.045 243.942 183.305 272.29 169.939 280.753 cv
135.854 302.333 92.6582 270.503 92.6582 270.503 cv
136.648 184.091 li
cp
.968627 .701961 .411765 rgb
f
109.227 135.268 mo
109.227 135.268 125.978 137.776 128.565 121.729 cv
131.319 104.646 115.584 101.389 108.129 107.654 cv
100.673 113.919 101.208 121.113 101.208 121.113 cv
101.208 121.113 96.9307 116.394 91.269 121.085 cv
87.1138 124.528 88.4253 130.977 88.4253 130.977 cv
88.4253 130.977 79.7773 129.764 79.8193 137.427 cv
79.8613 145.09 84.8935 149.487 84.8935 149.487 cv
109.227 135.268 li
cp
0 0 0 rgb
f
90.8286 163.433 mo
90.7681 181.496 li
90.7681 181.496 94.0078 186.7 104.572 187.594 cv
112.442 188.26 115.213 186.49 115.213 186.49 cv
114.146 177.338 li
113.095 168.413 li
94.0278 164.152 li
90.8286 163.433 li
cp
.956863 .517647 .384314 rgb
f
94.0278 164.152 mo
94.0718 164.645 94.2573 165.228 94.5469 165.896 cv
98.5586 174.933 109.602 176.916 114.146 177.338 cv
113.095 168.413 li
94.0278 164.152 li
cp
0 0 0 rgb
f
117.261 127.254 mo
117.261 127.254 126.665 149.933 122.885 162.503 cv
119.105 175.074 107.63 172.868 100.787 170.295 cv
93.9443 167.722 90.8262 163.437 90.8262 163.437 cv
90.8262 163.437 84.3501 165.498 80.1592 159.433 cv
75.9678 153.368 78.7476 146.546 82.4512 145.041 cv
86.1553 143.535 90.4746 146.271 90.4746 146.271 cv
87.1733 139.668 li
87.1733 139.668 102.208 106.719 117.261 127.254 cv
cp
.956863 .517647 .384314 rgb
f
89.7759 155.952 mo
89.6435 155.952 89.5098 155.912 89.3945 155.828 cv
81.2764 149.948 li
80.9853 149.737 80.9204 149.33 81.1309 149.039 cv
81.3418 148.748 81.7485 148.683 82.04 148.894 cv
90.1582 154.773 li
90.4492 154.984 90.5142 155.392 90.3037 155.683 cv
90.1763 155.858 89.9775 155.952 89.7759 155.952 cv
cp
0 0 0 rgb
f
82.3589 155.826 mo
82.0684 155.826 81.8032 155.629 81.7285 155.335 cv
81.6401 154.986 81.8511 154.632 82.1992 154.544 cv
87.563 153.183 li
87.9106 153.097 88.2656 153.305 88.354 153.653 cv
88.4424 154.002 88.2314 154.356 87.8833 154.444 cv
82.5195 155.806 li
82.4658 155.819 82.4121 155.826 82.3589 155.826 cv
cp
f
102.1 136.662 mo
101.96 136.662 101.82 136.617 101.701 136.525 cv
101.417 136.304 101.366 135.895 101.586 135.611 cv
104.625 131.702 108.567 133.79 108.607 133.812 cv
108.923 133.983 109.039 134.379 108.867 134.694 cv
108.695 135.01 108.301 135.126 107.985 134.955 cv
107.85 134.883 104.955 133.398 102.615 136.41 cv
102.486 136.575 102.294 136.662 102.1 136.662 cv
cp
f
120.798 137.669 mo
120.652 137.669 120.504 137.62 120.383 137.519 cv
118.428 135.893 116.345 137.081 116.324 137.094 cv
116.013 137.274 115.615 137.171 115.434 136.861 cv
115.252 136.551 115.356 136.152 115.666 135.971 cv
115.783 135.901 118.567 134.315 121.215 136.518 cv
121.491 136.748 121.529 137.158 121.299 137.434 cv
121.17 137.589 120.985 137.669 120.798 137.669 cv
cp
f
115.162 155.992 mo
115.099 155.992 115.036 155.983 114.973 155.964 cv
114.629 155.86 114.434 155.497 114.538 155.153 cv
116.521 148.574 113.053 143.754 113.018 143.707 cv
112.805 143.417 112.866 143.01 113.155 142.797 cv
113.445 142.584 113.852 142.644 114.064 142.932 cv
114.225 143.148 117.963 148.303 115.784 155.529 cv
115.699 155.81 115.441 155.992 115.162 155.992 cv
cp
f
119.513 144.55 mo
119.226 144.55 118.963 144.359 118.885 144.069 cv
117.769 139.922 li
117.675 139.575 117.88 139.218 118.228 139.125 cv
118.574 139.032 118.932 139.237 119.025 139.583 cv
120.142 143.73 li
120.236 144.077 120.03 144.435 119.683 144.528 cv
119.626 144.543 119.569 144.55 119.513 144.55 cv
cp
f
108.081 145.486 mo
107.794 145.486 107.531 145.294 107.453 145.004 cv
106.336 140.858 li
106.243 140.511 106.448 140.153 106.795 140.06 cv
107.142 139.969 107.5 140.173 107.593 140.519 cv
108.71 144.666 li
108.804 145.013 108.598 145.37 108.251 145.463 cv
108.194 145.479 108.137 145.486 108.081 145.486 cv
cp
f
119.145 132.364 mo
119.145 132.364 117.196 128.727 112.69 128.68 cv
108.184 128.634 105.542 131.799 105.542 131.799 cv
105.542 131.799 107.494 139.393 101.353 143.403 cv
95.2119 147.414 90.4746 146.271 90.4746 146.271 cv
86.0356 144.671 li
82.7974 138.167 li
95.7007 124.354 li
112.371 115.626 li
120.825 123.353 li
119.145 132.364 li
cp
f
90.9941 180.631 mo
90.9941 180.631 60.4678 175.313 41.6382 204.508 cv
25.6523 229.294 24.9648 252.637 24.9648 252.637 cv
73.2485 248.587 li
90.9941 180.631 li
cp
.968627 .701961 .411765 rgb
f
24.9648 252.637 mo
24.9648 252.637 23.6621 289.721 53.7251 287.183 cv
87.8613 284.3 105.389 217.512 105.389 217.512 cv
115.871 211.688 li
115.871 211.688 113.436 219.824 121.794 215.871 cv
130.153 211.919 129.036 203.495 129.036 203.495 cv
120.584 186.145 li
120.584 186.145 135.36 173.551 131.272 172.624 cv
124.959 171.193 104.27 183.734 104.27 183.734 cv
104.27 183.734 105.859 175.521 101.157 176.613 cv
96.0825 177.792 93.4009 192.951 93.4009 192.951 cv
36.6768 250.485 li
24.9648 252.637 li
cp
.956863 .517647 .384314 rgb
f
115.871 212.34 mo
115.672 212.34 115.479 212.248 115.353 212.083 cv
115.174 211.848 115.175 211.522 115.357 211.289 cv
119.384 206.111 li
119.605 205.827 120.014 205.775 120.297 205.997 cv
120.582 206.218 120.632 206.627 120.412 206.91 cv
117.894 210.146 li
121.339 208.722 li
121.673 208.586 122.052 208.742 122.189 209.074 cv
122.327 209.406 122.169 209.787 121.837 209.925 cv
116.12 212.29 li
116.039 212.323 115.954 212.34 115.871 212.34 cv
cp
0 0 0 rgb
f
116.831 189.096 mo
116.612 189.096 116.398 188.986 116.275 188.785 cv
116.087 188.479 116.184 188.078 116.49 187.89 cv
120.244 185.59 li
120.549 185.403 120.951 185.499 121.139 185.805 cv
121.327 186.111 121.23 186.512 120.924 186.7 cv
117.17 189 li
117.064 189.065 116.947 189.096 116.831 189.096 cv
cp
f
90.3901 193.148 mo
110.541 221.78 li
110.541 221.78 97.0308 269.754 69.8755 284.522 cv
42.7202 299.291 21.6528 278.656 24.9648 252.637 cv
28.2764 226.617 90.3901 193.148 90.3901 193.148 cv
cp
.968627 .701961 .411765 rgb
f
111.354 161.582 mo
111.239 161.582 111.124 161.552 111.019 161.489 cv
106.881 159.001 li
106.573 158.816 106.474 158.417 106.659 158.108 cv
106.844 157.8 107.244 157.699 107.552 157.886 cv
111.689 160.374 li
111.998 160.559 112.097 160.958 111.912 161.267 cv
111.79 161.47 111.574 161.582 111.354 161.582 cv
cp
0 0 0 rgb
f
104.271 184.385 mo
104.105 184.385 103.942 184.322 103.817 184.201 cv
103.61 184.001 103.56 183.688 103.692 183.433 cv
103.715 183.389 105.958 178.967 103.216 175.692 cv
102.787 175.179 102.44 175.167 102.217 175.203 cv
100.45 175.492 97.998 180.18 96.8672 183.068 cv
96.7353 183.402 96.3579 183.569 96.0239 183.437 cv
95.6894 183.306 95.5239 182.928 95.6553 182.593 cv
95.9819 181.758 98.936 174.42 102.007 173.918 cv
102.576 173.828 103.424 173.912 104.214 174.856 cv
106.361 177.42 106.033 180.434 105.509 182.292 cv
111.86 178.726 li
112.173 178.55 112.571 178.661 112.747 178.975 cv
112.923 179.288 112.811 179.685 112.498 179.861 cv
104.588 184.301 li
104.489 184.357 104.379 184.385 104.271 184.385 cv
cp
f
69.8755 216.816 mo
69.8755 216.816 57.9277 215.905 52.25 217.891 cv
46.5718 219.876 35.4311 233.607 36.9853 235.837 cv
38.5395 238.066 42.3691 236.161 42.3691 236.161 cv
42.3691 236.161 40.0342 241.28 44.7534 241.427 cv
49.4726 241.573 69.8755 216.816 69.8755 216.816 cv
cp
.956863 .517647 .384314 rgb
f
161.595 243.416 mo
161.473 243.416 161.349 243.381 161.239 243.31 cv
146.474 233.656 110.415 230.27 110.052 230.236 cv
109.694 230.203 109.431 229.887 109.463 229.528 cv
109.496 229.17 109.82 228.902 110.17 228.939 cv
111.664 229.076 146.915 232.389 161.951 242.22 cv
162.252 242.417 162.337 242.82 162.14 243.121 cv
162.015 243.312 161.807 243.416 161.595 243.416 cv
cp
1 1 1 rgb
f
110.542 222.432 mo
110.332 222.432 110.126 222.33 110 222.143 cv
90.3979 192.85 li
75.4126 209.656 li
75.1733 209.924 74.7622 209.948 74.4936 209.708 cv
74.2251 209.469 74.2017 209.058 74.4409 208.789 cv
89.9858 191.356 li
90.1201 191.205 90.3125 191.124 90.5166 191.14 cv
90.7178 191.154 90.9009 191.26 91.0127 191.427 cv
111.083 221.418 li
111.282 221.717 111.202 222.121 110.903 222.321 cv
110.792 222.396 110.666 222.432 110.542 222.432 cv
cp
f
136.27 232.887 mo
143.763 233.896 150.077 233.986 150.606 233.023 cv
150.617 233.005 150.6 232.824 150.283 232.468 cv
147.828 229.696 140.671 231.376 136.27 232.887 cv
cp
146.046 234.996 mo
141.642 234.996 135.964 234.184 133.591 233.811 cv
133.304 233.766 133.082 233.536 133.046 233.247 cv
133.01 232.959 133.17 232.682 133.438 232.568 cv
133.993 232.334 147.066 226.877 151.257 231.604 cv
152.08 232.532 151.979 233.228 151.749 233.648 cv
151.196 234.658 148.886 234.996 146.046 234.996 cv
cp
f
95.3906 185.833 mo
95.3491 185.833 95.3071 185.829 95.2651 185.821 cv
91.834 185.148 90.5488 182.189 90.3486 180.719 cv
90.3003 180.362 90.5498 180.035 90.9058 179.986 cv
91.2602 179.941 91.5893 180.187 91.6387 180.542 cv
91.6606 180.697 92.1655 183.887 95.5151 184.543 cv
95.8682 184.613 96.0981 184.955 96.0288 185.307 cv
95.9678 185.618 95.6958 185.833 95.3906 185.833 cv
cp
f
42.0215 237.109 mo
41.8564 237.109 41.6914 237.047 41.5644 236.921 cv
41.3086 236.669 41.3057 236.257 41.5581 236.001 cv
52.6094 224.801 li
52.8618 224.545 53.2734 224.541 53.5298 224.795 cv
53.7856 225.047 53.7886 225.459 53.5361 225.715 cv
42.4849 236.915 li
42.3574 237.044 42.1894 237.109 42.0215 237.109 cv
cp
0 0 0 rgb
f
656.014 145.18 mo
656.014 145.18 667.872 140.118 668.795 149.3 cv
669.864 159.938 657.15 160.036 657.15 160.036 cv
656.014 145.18 li
cp
.956863 .517647 .384314 rgb
f
661.919 154.708 mo
661.808 154.708 661.695 154.68 661.592 154.62 cv
661.281 154.438 661.177 154.04 661.357 153.729 cv
665.314 146.947 li
665.496 146.637 665.893 146.529 666.205 146.713 cv
666.516 146.894 666.62 147.292 666.439 147.603 cv
662.482 154.386 li
662.361 154.593 662.144 154.708 661.919 154.708 cv
cp
0 0 0 rgb
f
698.29 214.483 mo
698.29 214.483 695.63 230.78 708.826 230.271 cv
722.023 229.763 722.728 210.928 722.728 210.928 cv
698.29 214.483 li
cp
.956863 .517647 .384314 rgb
f
713.701 195.516 mo
713.701 195.516 727.894 169.986 730.643 171.279 cv
733.392 172.572 696.596 228.026 694.948 227.234 cv
693.301 226.443 713.701 195.516 713.701 195.516 cv
cp
.27451 .345098 .517647 rgb
f
666.522 152.674 mo
666.512 152.674 663.129 152.618 663.129 152.618 cv
662.77 152.611 662.482 152.315 662.489 151.956 cv
662.495 151.596 662.771 151.317 663.15 151.316 cv
666.533 151.373 li
666.893 151.379 667.18 151.675 667.173 152.034 cv
667.167 152.39 666.877 152.674 666.522 152.674 cv
cp
0 0 0 rgb
f
634.636 170.473 mo
634.536 182.924 li
634.536 182.924 639.344 185.512 645.352 185.615 cv
653.464 185.753 656.201 180.94 656.201 180.94 cv
656.141 166.343 li
634.636 170.473 li
cp
.956863 .517647 .384314 rgb
f
634.636 170.454 mo
634.636 170.454 638.523 180.533 647.732 179.157 cv
655.156 178.047 657.278 167.521 657.278 167.521 cv
634.636 170.454 li
cp
0 0 0 rgb
f
659.783 134.995 mo
659.783 134.995 664.984 157.784 658.457 167.877 cv
651.457 178.7 640.184 175.469 635.964 172.225 cv
630.273 167.849 629.107 161.778 629.107 161.778 cv
629.107 161.778 621.284 163.336 618.676 156.956 cv
615.936 150.255 620.807 144.847 624.721 144.528 cv
628.634 144.208 629.09 144.921 629.09 144.921 cv
627.941 137.764 li
627.941 137.764 651.729 111.324 659.783 134.995 cv
cp
.956863 .517647 .384314 rgb
f
627.807 155.196 mo
627.656 155.196 627.506 155.145 627.383 155.04 cv
621.346 149.861 li
621.073 149.627 621.041 149.216 621.275 148.943 cv
621.511 148.67 621.921 148.641 622.193 148.873 cv
628.23 154.051 li
628.503 154.286 628.535 154.696 628.301 154.969 cv
628.172 155.119 627.989 155.196 627.807 155.196 cv
cp
0 0 0 rgb
f
622.231 156.15 mo
622.033 156.15 621.838 156.061 621.71 155.89 cv
621.494 155.603 621.552 155.195 621.839 154.979 cv
625.402 152.299 li
625.691 152.082 626.099 152.141 626.314 152.428 cv
626.53 152.715 626.473 153.124 626.186 153.339 cv
622.622 156.019 li
622.505 156.107 622.367 156.15 622.231 156.15 cv
cp
f
639.575 148.901 mo
639.233 148.901 638.946 148.634 638.927 148.289 cv
638.703 144.455 li
638.682 144.096 638.956 143.788 639.314 143.767 cv
639.666 143.75 639.981 144.021 640.002 144.379 cv
640.226 148.212 li
640.247 148.571 639.973 148.879 639.614 148.9 cv
639.602 148.901 639.588 148.901 639.575 148.901 cv
cp
f
654.251 148.097 mo
653.909 148.097 653.622 147.83 653.603 147.484 cv
653.378 143.65 li
653.356 143.291 653.631 142.983 653.989 142.962 cv
654.325 142.95 654.656 143.214 654.677 143.574 cv
654.901 147.408 li
654.923 147.767 654.648 148.075 654.29 148.096 cv
654.277 148.096 654.265 148.097 654.251 148.097 cv
cp
f
647.479 158.268 mo
647.438 158.268 647.395 158.264 647.353 158.255 cv
647 158.186 646.771 157.843 646.84 157.491 cv
647.958 151.832 646.113 147.141 646.095 147.094 cv
645.96 146.761 646.122 146.381 646.456 146.248 cv
646.786 146.116 647.168 146.275 647.302 146.609 cv
647.385 146.814 649.309 151.709 648.117 157.743 cv
648.056 158.053 647.784 158.268 647.479 158.268 cv
cp
f
656.184 139.808 mo
656.059 139.808 655.931 139.772 655.819 139.696 cv
654.664 138.912 652.742 138.966 652.098 139.054 cv
651.746 139.102 651.414 138.853 651.366 138.496 cv
651.317 138.14 651.567 137.812 651.924 137.764 cv
652.036 137.748 654.751 137.398 656.55 138.619 cv
656.848 138.82 656.925 139.225 656.724 139.522 cv
656.598 139.708 656.393 139.808 656.184 139.808 cv
cp
f
637.515 142.071 mo
637.375 142.071 637.234 142.027 637.116 141.935 cv
636.832 141.714 636.78 141.306 637 141.021 cv
638.333 139.303 641.021 138.796 641.134 138.775 cv
641.492 138.712 641.826 138.945 641.891 139.298 cv
641.956 139.651 641.722 139.99 641.368 140.056 cv
641.346 140.06 639.054 140.498 638.029 141.819 cv
637.9 141.985 637.708 142.071 637.515 142.071 cv
cp
f
627.284 144.959 mo
627.284 144.959 629.743 151.987 630.654 151.7 cv
631.564 151.413 630.032 140.33 627.384 139.883 cv
624.736 139.436 627.284 144.959 627.284 144.959 cv
cp
f
628.399 143.918 mo
628.399 143.918 636.243 142.87 641.321 138.525 cv
645.61 134.855 647.093 129.845 647.093 129.845 cv
647.093 129.845 650.457 129.244 655.432 131.977 cv
660.406 134.708 661.237 143.861 661.237 143.861 cv
661.237 143.861 669.39 127.879 664.87 122.59 cv
660.352 117.3 653.622 122.211 653.622 122.211 cv
653.622 122.211 654.353 111.99 640.481 116.615 cv
626.61 121.241 623.995 133.542 623.995 133.542 cv
623.995 133.542 619.174 133.357 618.798 137.834 cv
618.423 142.311 620.458 146.743 620.458 146.743 cv
620.458 146.743 622.449 144.658 625.718 145.688 cv
628.987 146.719 628.987 146.719 628.987 146.719 cv
628.399 143.918 li
cp
f
656.044 177.949 mo
656.044 177.949 653.591 180.751 647.382 181.487 cv
641.172 182.223 635.244 177.702 635.244 177.702 cv
631.92 185.435 li
642.401 190.563 li
658.89 187.616 li
658.194 180.166 li
656.044 177.949 li
cp
.639216 .482353 .564706 rgb
f
607.487 246.429 mo
607.405 246.429 607.321 246.413 607.241 246.38 cv
606.982 246.275 581.249 235.976 560.048 245.297 cv
559.722 245.444 559.336 245.293 559.19 244.963 cv
559.046 244.634 559.195 244.25 559.524 244.105 cv
581.235 234.559 607.471 245.066 607.733 245.175 cv
608.066 245.311 608.226 245.69 608.09 246.023 cv
607.986 246.275 607.743 246.429 607.487 246.429 cv
cp
.572549 .705882 .917647 rgb
f
574.898 232.649 mo
574.396 232.649 573.936 232.758 573.534 232.997 cv
573.376 233.092 573.114 233.274 573.136 233.442 cv
573.306 234.792 579.177 237.386 585.24 239.354 cv
582.421 236.509 577.897 232.649 574.898 232.649 cv
cp
587.396 241.356 mo
587.335 241.356 587.273 241.348 587.212 241.329 cv
583.705 240.294 572.231 236.677 571.844 233.605 cv
571.784 233.132 571.913 232.448 572.867 231.88 cv
577.752 228.955 586.864 239.109 587.886 240.276 cv
588.077 240.494 588.101 240.812 587.944 241.056 cv
587.823 241.246 587.614 241.356 587.396 241.356 cv
cp
f
719.263 205.468 mo
719.263 205.468 730.904 205.071 727.782 199.48 cv
724.661 193.89 703.998 189.675 701.272 195.726 cv
698.548 201.775 719.263 205.468 719.263 205.468 cv
cp
.956863 .517647 .384314 rgb
f
717.248 214.892 mo
717.248 214.892 728.89 214.495 725.768 208.904 cv
722.646 203.313 701.983 199.099 699.258 205.149 cv
696.533 211.199 717.248 214.892 717.248 214.892 cv
cp
f
709.556 221.611 mo
712.13 222.091 714.804 221.986 717.262 221.084 cv
719.458 220.278 721.281 218.87 719.789 216.461 cv
716.806 211.644 698.371 208.745 696.204 214.202 cv
694.588 218.271 704.438 220.659 709.556 221.611 cv
cp
f
722.188 204.2 mo
722.154 204.2 722.12 204.197 722.086 204.192 cv
706.205 201.714 li
705.851 201.658 705.607 201.325 705.662 200.97 cv
705.718 200.615 706.049 200.369 706.406 200.427 cv
722.287 202.905 li
722.642 202.961 722.885 203.294 722.83 203.649 cv
722.779 203.971 722.503 204.2 722.188 204.2 cv
cp
0 0 0 rgb
f
718.806 213.906 mo
718.772 213.906 718.738 213.903 718.704 213.898 cv
702.823 211.42 li
702.469 211.364 702.226 211.031 702.28 210.676 cv
702.336 210.32 702.665 210.079 703.024 210.133 cv
718.905 212.611 li
719.26 212.667 719.503 213 719.448 213.355 cv
719.397 213.677 719.121 213.906 718.806 213.906 cv
cp
f
648.975 190.559 mo
647.968 190.559 646.89 190.454 645.741 190.218 cv
645.389 190.146 645.162 189.802 645.234 189.45 cv
645.308 189.097 645.659 188.875 646.003 188.943 cv
654.903 190.774 659.033 183.995 659.074 183.927 cv
659.257 183.619 659.657 183.514 659.966 183.699 cv
660.275 183.883 660.377 184.282 660.193 184.591 cv
660.153 184.659 656.552 190.559 648.975 190.559 cv
cp
.572549 .705882 .917647 rgb
f
644.862 164.906 mo
643.513 164.906 641.401 164.369 639.899 161.448 cv
639.735 161.128 639.861 160.736 640.181 160.572 cv
640.505 160.407 640.895 160.535 641.058 160.853 cv
642.887 164.414 645.63 163.536 645.744 163.496 cv
646.084 163.381 646.453 163.561 646.57 163.899 cv
646.687 164.237 646.512 164.605 646.174 164.725 cv
646.16 164.729 645.637 164.906 644.862 164.906 cv
cp
0 0 0 rgb
f
905.025 142.928 mo
905.025 142.928 900.299 131.91 901.204 127.075 cv
902.108 122.24 921.271 108.016 937.329 115.739 cv
953.388 123.463 954.216 144.708 950.469 153.447 cv
940.819 175.948 921.457 165.304 921.457 165.304 cv
921.457 165.304 890.519 155.465 905.025 142.928 cv
cp
f
907.52 168.537 mo
907.499 168.976 li
907.424 177.25 li
907.338 183.737 li
907.338 183.737 906.704 185.213 914.266 185.129 cv
924.401 184.979 927.89 180.816 927.89 180.816 cv
929.135 165.666 li
926.042 166.084 li
907.52 168.537 li
cp
.956863 .517647 .384314 rgb
f
907.499 168.976 mo
907.424 177.25 li
912.362 176.918 921.408 175.274 925.431 167.749 cv
925.742 167.137 925.956 166.583 926.041 166.116 cv
907.536 168.852 li
907.499 168.976 li
cp
0 0 0 rgb
f
906.422 129.293 mo
906.422 129.293 895.875 150.283 898.609 162.541 cv
901.344 174.797 912.448 173.488 919.156 171.508 cv
925.864 169.527 929.137 165.655 929.137 165.655 cv
929.137 165.655 935.174 168.07 939.594 162.573 cv
944.014 157.077 941.835 150.374 938.404 148.681 cv
934.975 146.987 930.663 149.298 930.663 149.298 cv
934.271 143.228 li
934.271 143.228 922.21 110.743 906.422 129.293 cv
cp
.956863 .517647 .384314 rgb
f
930.663 149.298 mo
930.663 149.298 921.507 144.046 918.43 137.128 cv
915.354 130.21 915.387 126.815 915.387 126.815 cv
915.387 126.815 913.804 131.183 910.333 132.065 cv
906.862 132.947 904.73 132.964 904.73 132.964 cv
902.25 139.163 li
904.378 124.207 li
904.378 124.207 913.884 119.688 915.125 119.747 cv
916.365 119.805 931.892 123.35 932.753 124.335 cv
933.614 125.32 937.978 137.714 937.978 137.714 cv
938.061 143.224 li
930.663 149.298 li
cp
0 0 0 rgb
f
905.422 266.146 mo
905.422 266.146 901.527 265.362 896.645 263.198 cv
891.762 261.034 871.938 260.391 865.136 260.115 cv
858.333 259.84 841.053 266.951 842.89 269.299 cv
844.728 271.646 860.567 269.865 860.567 269.865 cv
860.567 269.865 846.941 280.051 848.674 282.547 cv
850.405 285.044 855.435 282.882 855.435 282.882 cv
855.435 282.882 851.157 285.891 854.788 287.634 cv
858.419 289.376 873.906 280.678 873.906 280.678 cv
873.906 280.678 866.167 290.786 868.644 292.231 cv
871.119 293.678 882.162 284.976 882.162 284.976 cv
882.162 284.976 893.658 295.612 901.917 289.712 cv
910.177 283.811 912.651 278.667 912.651 278.667 cv
905.422 266.146 li
cp
.956863 .517647 .384314 rgb
f
950.011 183.919 mo
950.011 183.919 995.011 209.637 988.115 267.898 cv
983.339 308.261 894.604 296.48 894.604 296.48 cv
893.385 260.095 li
893.385 260.095 940.073 247.423 943.696 245.446 cv
950.699 241.628 950.011 183.919 950.011 183.919 cv
cp
.27451 .345098 .517647 rgb
f
634.636 221.439 mo
634.636 216.053 li
634.636 216.053 642.213 213.912 652.011 214.697 cv
661.808 215.482 668.859 220.19 668.859 220.19 cv
668.859 220.19 677.765 215.397 688.229 214.524 cv
698.692 213.651 704.802 214.524 704.802 214.524 cv
703.663 221.439 li
666.522 228.562 li
634.636 221.439 li
cp
1 1 1 rgb
f
705.609 219.145 mo
695.141 290.968 li
623.317 290.968 li
633.786 219.145 li
705.609 219.145 li
cp
.407843 .713726 .847059 rgb
f
671.816 219.145 mo
662.948 290.968 li
655.979 290.968 li
664.848 219.145 li
671.816 219.145 li
cp
.32549 .666667 .788235 rgb
f
609.786 253.641 mo
609.786 253.641 619.937 231.915 621.562 230.366 cv
623.186 228.817 642.106 222.391 644.681 222.518 cv
647.254 222.644 643.212 228.378 641.187 229.995 cv
639.162 231.613 636.548 233.361 636.548 233.361 cv
636.548 233.361 650.712 233.363 652.027 235.756 cv
653.344 238.147 649.55 240.356 649.55 240.356 cv
649.55 240.356 654.619 240.788 652.801 244.043 cv
650.982 247.297 637.082 250.936 637.082 250.936 cv
637.082 250.936 634.43 264.753 625.074 268.027 cv
615.72 271.302 611.347 270.376 611.347 270.376 cv
609.786 253.641 li
cp
.956863 .517647 .384314 rgb
f
625.719 235.022 mo
625.387 235.022 625.104 234.769 625.071 234.432 cv
625.038 234.073 625.302 233.757 625.659 233.723 cv
636.487 232.713 li
636.844 232.679 637.162 232.943 637.196 233.301 cv
637.229 233.659 636.966 233.976 636.608 234.01 cv
625.78 235.02 li
625.76 235.021 625.739 235.022 625.719 235.022 cv
cp
0 0 0 rgb
f
631.81 242.241 mo
631.466 242.241 631.179 241.972 631.16 241.624 cv
631.142 241.266 631.417 240.959 631.776 240.939 cv
642.183 240.391 li
642.531 240.396 642.848 240.647 642.867 241.007 cv
642.886 241.365 642.61 241.672 642.251 241.691 cv
631.845 242.24 li
631.833 242.24 631.821 242.241 631.81 242.241 cv
cp
f
366.161 232.41 mo
366.161 232.41 374.152 204.315 377.124 204.946 cv
380.095 205.578 356.925 267.966 355.141 267.571 cv
353.355 267.177 366.161 232.41 366.161 232.41 cv
cp
.27451 .345098 .517647 rgb
f
360.434 266.659 mo
358.739 267.334 349.949 231.345 349.949 231.345 cv
349.949 231.345 345.57 217.877 343.859 209.323 cv
343.106 205.588 342.871 202.778 343.718 202.433 cv
344.283 202.213 345.351 204.599 346.7 208.586 cv
352.084 224.579 361.784 266.126 360.434 266.659 cv
cp
.639216 .482353 .564706 rgb
f
366.235 270.646 mo
349.725 270.646 li
348.654 270.646 347.743 269.853 347.577 268.775 cv
343.343 241.29 li
343.136 239.947 344.156 238.733 345.491 238.733 cv
370.47 238.733 li
371.805 238.733 372.825 239.947 372.618 241.29 cv
368.383 268.775 li
368.217 269.853 367.306 270.646 366.235 270.646 cv
cp
.694118 .647059 .717647 rgb
f
346.7 208.586 mo
343.859 209.323 li
343.106 205.588 342.871 202.778 343.718 202.433 cv
344.283 202.213 345.351 204.599 346.7 208.586 cv
cp
1 1 1 rgb
f
305.282 295.029 mo
398.188 295.029 li
401.518 295.029 404.217 292.33 404.217 289 cv
404.217 288.699 li
404.217 285.37 401.518 282.67 398.188 282.67 cv
305.282 282.67 li
305.282 295.029 li
cp
.694118 .647059 .717647 rgb
f
305.456 295.029 mo
365.006 295.029 li
368.147 295.029 370.693 292.483 370.693 289.343 cv
370.693 288.357 li
370.693 285.217 368.147 282.67 365.006 282.67 cv
305.456 282.67 li
304.338 282.67 303.432 283.576 303.432 284.694 cv
303.432 293.005 li
303.432 294.123 304.338 295.029 305.456 295.029 cv
cp
.784314 .737255 .807843 rgb
f
303.432 292.643 mo
364.086 292.643 li
366.224 292.643 367.956 290.91 367.956 288.772 cv
367.956 288.665 li
367.956 286.528 366.224 284.796 364.086 284.796 cv
303.432 284.796 li
303.432 292.643 li
cp
1 1 1 rgb
f
380.687 282.67 mo
324.03 282.67 li
320.71 282.67 318.018 279.979 318.018 276.658 cv
318.018 273.338 320.71 270.646 324.03 270.646 cv
380.687 270.646 li
381.726 270.646 382.569 271.489 382.569 272.528 cv
382.569 280.788 li
382.569 281.828 381.726 282.67 380.687 282.67 cv
cp
.92549 .909804 .937255 rgb
f
394.502 282.67 mo
337.846 282.67 li
334.526 282.67 331.834 279.979 331.834 276.658 cv
331.834 273.338 334.526 270.646 337.846 270.646 cv
394.502 270.646 li
395.542 270.646 396.385 271.489 396.385 272.528 cv
396.385 280.788 li
396.385 281.828 395.542 282.67 394.502 282.67 cv
cp
.784314 .737255 .807843 rgb
f
396.385 280.349 mo
338.278 280.349 li
336.17 280.349 334.461 278.64 334.461 276.531 cv
334.461 274.423 336.17 272.714 338.278 272.714 cv
396.385 272.714 li
396.385 280.349 li
cp
1 1 1 rgb
f
492.9 289.179 mo
556.416 289.179 li
560.326 289.179 563.496 286.008 563.496 282.098 cv
563.496 278.188 560.326 275.017 556.416 275.017 cv
492.9 275.017 li
492.454 275.017 492.092 275.379 492.092 275.825 cv
492.092 288.37 li
492.092 288.816 492.454 289.179 492.9 289.179 cv
cp
.694118 .647059 .717647 rgb
f
490.884 289.179 mo
540.035 289.179 li
543.945 289.179 547.116 286.008 547.116 282.098 cv
547.116 278.188 543.945 275.017 540.035 275.017 cv
490.884 275.017 li
489.771 275.017 488.868 275.92 488.868 277.033 cv
488.868 287.162 li
488.868 288.275 489.771 289.179 490.884 289.179 cv
cp
.784314 .737255 .807843 rgb
f
488.868 286.443 mo
540.249 286.443 li
542.732 286.443 544.745 284.431 544.745 281.948 cv
544.745 279.465 542.732 277.452 540.249 277.452 cv
488.868 277.452 li
488.868 286.443 li
cp
1 1 1 rgb
f
854.504 230.819 mo
855.176 234.015 856.569 239.014 858.36 239.946 cv
858.679 240.114 858.971 240.114 859.306 239.954 cv
860.202 239.521 860.354 238.999 860.389 238.645 cv
860.605 236.493 856.966 232.906 854.504 230.819 cv
cp
858.833 241.374 mo
858.469 241.374 858.107 241.283 857.759 241.102 cv
854.627 239.469 853.062 230.342 852.894 229.307 cv
852.851 229.044 852.973 228.781 853.201 228.645 cv
853.428 228.507 853.717 228.521 853.93 228.684 cv
854.764 229.316 862.065 234.976 861.685 238.774 cv
861.613 239.482 861.241 240.466 859.87 241.126 cv
859.528 241.291 859.18 241.374 858.833 241.374 cv
cp
.639216 .482353 .564706 rgb
f
914.052 185.705 mo
909.759 185.705 907.228 184.415 907.034 184.313 cv
906.717 184.145 906.596 183.753 906.763 183.435 cv
906.93 183.118 907.321 182.996 907.641 183.161 cv
907.725 183.206 916.19 187.457 928.794 179.673 cv
929.101 179.484 929.502 179.58 929.689 179.885 cv
929.878 180.191 929.783 180.592 929.478 180.781 cv
923.192 184.663 917.911 185.705 914.052 185.705 cv
cp
f
893.386 260.746 mo
893.104 260.746 892.844 260.562 892.761 260.276 cv
892.66 259.932 892.858 259.57 893.204 259.47 cv
943.018 244.966 li
942.279 231.755 li
942.259 231.396 942.533 231.089 942.893 231.069 cv
943.218 231.034 943.559 231.323 943.578 231.683 cv
944.346 245.41 li
944.363 245.712 944.169 245.986 943.878 246.071 cv
893.567 260.72 li
893.507 260.737 893.445 260.746 893.386 260.746 cv
cp
f
884.03 256.831 mo
883.687 256.831 883.399 256.562 883.381 256.214 cv
882.28 235.24 li
881.871 234.285 879.379 227.976 880.049 217.346 cv
880.763 206.012 886.682 197.021 886.934 196.644 cv
887.133 196.343 887.537 196.266 887.836 196.463 cv
888.135 196.663 888.216 197.067 888.017 197.366 cv
887.956 197.456 882.039 206.454 881.348 217.428 cv
880.655 228.427 883.487 234.753 883.516 234.815 cv
883.55 234.891 883.569 234.971 883.574 235.053 cv
884.682 256.146 li
884.7 256.505 884.425 256.811 884.065 256.83 cv
884.054 256.83 884.042 256.831 884.03 256.831 cv
cp
f
946.228 245.724 mo
950.326 248.459 955.686 251.468 957.331 250.823 cv
957.471 250.77 957.607 250.68 957.667 250.39 cv
957.73 250.086 957.656 249.803 957.434 249.499 cv
956.046 247.604 950.211 246.336 946.228 245.724 cv
cp
956.863 252.191 mo
953.051 252.191 944.98 246.494 943.274 245.258 cv
943.036 245.085 942.943 244.773 943.048 244.498 cv
943.153 244.224 943.417 244.058 943.723 244.083 cv
944.98 244.212 956.075 245.442 958.483 248.729 cv
958.927 249.335 959.081 249.981 958.942 250.653 cv
958.804 251.323 958.409 251.802 957.802 252.037 cv
957.531 252.143 957.215 252.191 956.863 252.191 cv
cp
f
858.461 281.104 mo
858.254 281.104 858.052 281.006 857.925 280.824 cv
857.72 280.528 857.794 280.123 858.09 279.918 cv
872.408 270 li
872.706 269.794 873.108 269.87 873.314 270.164 cv
873.519 270.46 873.445 270.865 873.149 271.07 cv
858.83 280.988 li
858.718 281.066 858.588 281.104 858.461 281.104 cv
cp
0 0 0 rgb
f
860.568 270.517 mo
860.345 270.517 860.128 270.401 860.007 270.195 cv
859.824 269.886 859.928 269.486 860.237 269.305 cv
866.562 265.583 li
866.872 265.397 867.271 265.505 867.452 265.813 cv
867.635 266.123 867.531 266.522 867.222 266.704 cv
860.897 270.426 li
860.794 270.487 860.68 270.517 860.568 270.517 cv
cp
f
767.026 286.72 mo
848.525 286.718 li
850.335 286.718 851.475 284.769 850.587 283.191 cv
822.694 230.627 li
822.275 229.882 821.487 229.421 820.633 229.421 cv
739.134 229.423 li
737.324 229.423 736.184 231.372 737.071 232.949 cv
764.964 285.514 li
765.383 286.259 766.172 286.72 767.026 286.72 cv
cp
.572549 .705882 .917647 rgb
f
766.029 290.736 mo
864.646 290.736 li
865.556 290.736 866.293 289.998 866.293 289.088 cv
866.293 284.771 li
866.293 283.861 865.556 283.123 864.646 283.123 cv
766.029 283.123 li
765.119 283.123 764.382 283.861 764.382 284.771 cv
764.382 289.088 li
764.382 289.998 765.119 290.736 766.029 290.736 cv
cp
.407843 .462745 .666667 rgb
f
792.493 291.028 mo
712.627 291.028 li
708.751 291.028 705.609 287.887 705.609 284.011 cv
705.609 283.885 li
705.609 280.009 708.751 276.867 712.627 276.867 cv
792.493 276.867 li
793.873 276.867 794.991 277.985 794.991 279.365 cv
794.991 288.531 li
794.991 289.91 793.873 291.028 792.493 291.028 cv
cp
.968627 .701961 .411765 rgb
f
803.336 291.179 mo
733.074 291.179 li
729.426 291.179 726.469 288.221 726.469 284.572 cv
726.469 283.623 li
726.469 279.975 729.426 277.017 733.074 277.017 cv
803.336 277.017 li
804.634 277.017 805.687 278.069 805.687 279.368 cv
805.687 288.827 li
805.687 290.126 804.634 291.179 803.336 291.179 cv
cp
1 .784314 .572549 rgb
f
805.687 288.443 mo
734.188 288.443 li
731.705 288.443 729.692 286.431 729.692 283.948 cv
729.692 281.465 731.705 279.452 734.188 279.452 cv
805.687 279.452 li
805.687 288.443 li
cp
1 1 1 rgb
f
712.417 277.13 mo
791.451 277.13 li
795.361 277.13 798.532 273.959 798.532 270.049 cv
798.532 266.138 795.361 262.968 791.451 262.968 cv
712.417 262.968 li
712.314 262.968 712.232 263.051 712.232 263.153 cv
712.232 276.944 li
712.232 277.047 712.314 277.13 712.417 277.13 cv
cp
.784314 .737255 .807843 rgb
f
710.553 277.13 mo
771.653 277.13 li
775.564 277.13 778.734 273.959 778.734 270.049 cv
778.734 266.138 775.564 262.968 771.653 262.968 cv
710.553 262.968 li
709.328 262.968 708.336 263.96 708.336 265.185 cv
708.336 274.913 li
708.336 276.137 709.328 277.13 710.553 277.13 cv
cp
.92549 .909804 .937255 rgb
f
708.336 274.395 mo
771.373 274.395 li
773.856 274.395 775.869 272.382 775.869 269.898 cv
775.869 267.416 773.856 265.403 771.373 265.403 cv
708.336 265.403 li
708.336 274.395 li
cp
1 1 1 rgb
f
718.889 263.08 mo
782.404 263.08 li
786.314 263.08 789.485 259.91 789.485 256 cv
789.485 252.089 786.314 248.919 782.404 248.919 cv
718.889 248.919 li
718.442 248.919 718.08 249.281 718.08 249.728 cv
718.08 262.271 li
718.08 262.719 718.442 263.08 718.889 263.08 cv
cp
.694118 .647059 .717647 rgb
f
716.873 263.08 mo
766.023 263.08 li
769.935 263.08 773.104 259.91 773.104 256 cv
773.104 252.089 769.935 248.919 766.023 248.919 cv
716.873 248.919 li
715.759 248.919 714.856 249.821 714.856 250.936 cv
714.856 261.064 li
714.856 262.178 715.759 263.08 716.873 263.08 cv
cp
.784314 .737255 .807843 rgb
f
714.856 260.346 mo
766.238 260.346 li
768.721 260.346 770.733 258.333 770.733 255.85 cv
770.733 253.367 768.721 251.354 766.238 251.354 cv
714.856 251.354 li
714.856 260.346 li
cp
.92549 .909804 .937255 rgb
f
766.367 236.566 mo
738.74 236.566 li
738.381 236.566 738.089 236.274 738.089 235.915 cv
738.089 235.556 738.381 235.264 738.74 235.264 cv
766.367 235.264 li
766.727 235.264 767.019 235.556 767.019 235.915 cv
767.019 236.274 766.727 236.566 766.367 236.566 cv
cp
1 1 1 rgb
f
906.963 161.269 mo
907.111 161.763 907.395 162.408 907.864 162.754 cv
908.183 162.99 908.558 163.068 909.012 162.994 cv
910.311 162.782 912.059 160.884 913.267 159.331 cv
906.963 161.269 li
cp
908.689 164.323 mo
908.094 164.323 907.557 164.147 907.085 163.798 cv
905.824 162.862 905.561 160.989 905.55 160.91 cv
905.508 160.595 905.7 160.295 906.004 160.202 cv
914.734 157.518 li
915 157.438 915.281 157.53 915.445 157.748 cv
915.61 157.967 915.621 158.266 915.471 158.495 cv
915.115 159.041 911.918 163.839 909.221 164.279 cv
909.039 164.308 908.861 164.323 908.689 164.323 cv
cp
0 0 0 rgb
f
905.793 156.434 mo
905.519 156.434 905.264 156.259 905.174 155.984 cv
903.468 150.732 907.776 146.653 907.961 146.482 cv
908.225 146.238 908.636 146.254 908.879 146.516 cv
909.124 146.779 909.109 147.19 908.847 147.436 cv
908.808 147.472 904.966 151.13 906.412 155.582 cv
906.523 155.924 906.336 156.291 905.994 156.402 cv
905.928 156.424 905.859 156.434 905.793 156.434 cv
cp
f
904.221 147.61 mo
904.178 147.61 904.135 147.606 904.092 147.598 cv
903.739 147.527 903.511 147.185 903.581 146.832 cv
904.332 143.076 li
902.882 141.029 li
902.674 140.736 902.743 140.33 903.037 140.122 cv
903.331 139.915 903.736 139.984 903.944 140.276 cv
905.557 142.552 li
905.66 142.698 905.698 142.88 905.664 143.056 cv
904.858 147.087 li
904.796 147.396 904.524 147.61 904.221 147.61 cv
cp
f
915.733 148.632 mo
915.69 148.632 915.647 148.628 915.604 148.619 cv
915.252 148.549 915.023 148.206 915.094 147.854 cv
915.845 144.097 li
914.395 142.051 li
914.187 141.757 914.256 141.351 914.55 141.143 cv
914.844 140.936 915.25 141.005 915.457 141.298 cv
917.069 143.573 li
917.173 143.719 917.212 143.902 917.177 144.077 cv
916.371 148.108 li
916.309 148.418 916.037 148.632 915.733 148.632 cv
cp
f
902.822 138.384 mo
902.682 138.384 902.54 138.339 902.421 138.246 cv
902.138 138.024 902.088 137.615 902.31 137.332 cv
903.767 135.472 906.214 136.074 907.306 136.653 cv
907.623 136.821 907.743 137.214 907.576 137.531 cv
907.41 137.849 907.016 137.972 906.698 137.805 cv
906.607 137.758 904.482 136.67 903.335 138.135 cv
903.206 138.299 903.015 138.384 902.822 138.384 cv
cp
f
920.155 139.304 mo
920.045 139.304 919.934 139.276 919.831 139.217 cv
916.826 137.483 914.744 138.299 914.658 138.333 cv
914.328 138.468 913.946 138.314 913.809 137.984 cv
913.67 137.654 913.821 137.276 914.15 137.135 cv
914.259 137.088 916.879 136.008 920.481 138.09 cv
920.793 138.27 920.899 138.667 920.72 138.979 cv
920.6 139.188 920.381 139.304 920.155 139.304 cv
cp
f
931.281 159.688 mo
931.119 159.688 930.956 159.627 930.83 159.506 cv
930.571 159.257 930.563 158.845 930.813 158.586 cv
937.008 152.149 li
937.258 151.891 937.67 151.883 937.928 152.132 cv
938.187 152.381 938.194 152.793 937.945 153.052 cv
931.75 159.488 li
931.622 159.621 931.452 159.688 931.281 159.688 cv
cp
f
938.149 158.174 mo
938.101 158.174 938.052 158.168 938.003 158.157 cv
933.572 157.14 li
933.222 157.059 933.003 156.71 933.083 156.36 cv
933.163 156.009 933.519 155.792 933.863 155.871 cv
938.294 156.889 li
938.645 156.969 938.863 157.318 938.783 157.668 cv
938.714 157.97 938.445 158.174 938.149 158.174 cv
cp
f
479.29 256.426 mo
479.29 256.426 499.278 253.186 506.769 252.397 cv
515.013 251.529 519.587 256.102 522.39 259.197 cv
527.155 264.46 527.251 274.967 526.584 276.771 cv
525.571 279.512 520.551 273.9 520.551 273.9 cv
520.551 273.9 521.041 276.091 518.677 278.061 cv
516.313 280.03 513.786 279.623 513.786 279.623 cv
513.786 279.623 514.179 283.82 512.029 284.074 cv
509.88 284.328 500.769 286.452 499.87 283.878 cv
498.971 281.304 505.721 278.06 505.721 278.06 cv
504.322 273.609 li
504.322 273.609 500.551 282.562 492.287 282.656 cv
484.023 282.751 479.692 273.64 479.692 273.64 cv
479.29 256.426 li
cp
.956863 .517647 .384314 rgb
f
520.552 274.552 mo
520.519 274.552 520.485 274.549 520.451 274.544 cv
520.097 274.489 519.853 274.156 519.907 273.801 cv
520.688 268.744 515.551 264.566 515.499 264.525 cv
515.219 264.301 515.173 263.892 515.397 263.61 cv
515.62 263.331 516.03 263.283 516.312 263.508 cv
516.548 263.696 522.091 268.191 521.194 274 cv
521.145 274.321 520.867 274.552 520.552 274.552 cv
cp
0 0 0 rgb
f
513.786 280.274 mo
513.706 280.274 513.626 280.26 513.547 280.229 cv
513.213 280.097 513.049 279.719 513.181 279.384 cv
514.786 275.314 511.397 270.326 511.363 270.276 cv
511.159 269.98 511.233 269.575 511.528 269.371 cv
511.824 269.168 512.229 269.24 512.434 269.536 cv
512.591 269.763 516.254 275.142 514.392 279.862 cv
514.291 280.118 514.045 280.274 513.786 280.274 cv
cp
f
470.044 289.275 mo
470.044 248.642 li
470.044 247.592 470.895 246.74 471.945 246.74 cv
481.513 246.74 li
482.563 246.74 483.414 247.592 483.414 248.642 cv
483.414 289.275 li
483.414 290.326 482.563 291.177 481.513 291.177 cv
471.945 291.177 li
470.895 291.177 470.044 290.326 470.044 289.275 cv
cp
.968627 .701961 .411765 rgb
f
192.03 235.322 mo
192.03 235.322 197.526 230.855 208.809 228.687 cv
220.09 226.517 230.794 226.78 230.794 226.78 cv
232.819 237.336 li
192.03 235.322 li
cp
.933333 .929412 .937255 rgb
f
193.621 236.34 mo
193.621 236.34 182.195 229.844 171.781 228.976 cv
161.367 228.107 152.254 230.133 152.254 230.133 cv
154.713 239.351 li
193.621 236.34 li
cp
f
243.952 294.177 mo
160.313 294.177 li
150.472 234.022 li
234.124 234.022 li
243.952 294.177 li
cp
.784314 .737255 .807843 rgb
f
205.55 294.177 mo
198.273 294.177 li
188.874 234.022 li
195.865 234.022 li
205.55 294.177 li
cp
.866667 .835294 .886275 rgb
f
221.391 294.83 mo
221.083 294.83 220.81 294.61 220.752 294.297 cv
219.332 286.629 li
219.206 285.95 218.614 285.457 217.923 285.457 cv
182.96 285.457 li
182.55 285.457 182.159 285.634 181.887 285.941 cv
181.615 286.249 181.488 286.658 181.539 287.065 cv
182.407 294.099 li
182.451 294.456 182.197 294.78 181.84 294.824 cv
181.491 294.876 181.159 294.615 181.115 294.259 cv
180.247 287.226 li
180.15 286.448 180.393 285.666 180.911 285.079 cv
181.43 284.492 182.177 284.155 182.96 284.155 cv
217.923 284.155 li
219.241 284.155 220.372 285.097 220.612 286.392 cv
222.032 294.061 li
222.098 294.414 221.864 294.753 221.511 294.818 cv
221.471 294.826 221.431 294.83 221.391 294.83 cv
cp
.694118 .647059 .717647 rgb
f
243.952 294.828 mo
160.313 294.828 li
159.954 294.828 159.663 294.536 159.663 294.177 cv
159.663 293.817 159.954 293.525 160.313 293.525 cv
243.952 293.525 li
244.311 293.525 244.603 293.817 244.603 294.177 cv
244.603 294.536 244.311 294.828 243.952 294.828 cv
cp
f
243.951 264.751 mo
243.664 264.751 243.4 264.559 243.323 264.267 cv
238.812 247.317 252.029 221.402 252.594 220.307 cv
252.76 219.987 253.153 219.862 253.471 220.027 cv
253.79 220.191 253.916 220.584 253.751 220.904 cv
253.615 221.168 240.199 247.47 244.581 263.933 cv
244.673 264.279 244.466 264.636 244.119 264.729 cv
244.063 264.743 244.007 264.751 243.951 264.751 cv
cp
.27451 .345098 .517647 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.316B.p1.316-temp_01.eps)
%%CreationDate: 4/18/2022 7:32 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJcSk]M^5q=N%lOOl+dcT92ooTI84_A7A7%l;2rNUG?BWEXG^fOj;l]Q.jsH:ND8qtECq6RH[$40\WT9J8eQTRg/6,JH
%CO[q6N7=RWN0J%D<m(3ps38bM/+#dMr[&Kbs85Vb1LllN/'[[n6G!k1>J#ku+_ioV[;rCs>YaC0L=OdSGXA$UWHV4M>l0Xe/Vf$9
%lBC%C%bFA8BYDuqKWUK.0c4RGEp$Lul9u6!CCT1"(<Z#RZqL@mi^SVcDt5:4+hu]k=tQ0nNG;olHV[^i-Nb(QhqX"#kbQ^E28WCn
%<rFk9VV)D[#2P@*TmT*9UZ^!RF7`lj+!$.(E_C#.lF*FRXn`YPZ&m\="4H7:6ko'*l9XHSVV_Ems"0]7^YA,7/%i;gG"Tk9]=W?I
%@7^RQ81B<X[WDcG_>o,1nK^E<K;_[$LTQ@ml54EY8M+,#6%=4<`/TU8gb>rgL?!gUIZUg4Ja(@)][L`0!YBc576d):c_@W\2)Lr3
%NRiRCDrPC\2GT-_8:S/$/k:n&eP_<]k;"S"G&5]d;-DPN+0o2__;JW4iHO):+DdQ9/J?iB\IEF-Vu4ggg[3-qpbQYAis,dD48#Ou
%:j^I9?$%in@<b)\[(VF(Q('Nb!HBZ0l'LM2R!5,tDrZtJ_ts1R(`jD&idkCI,aUTPdRgFLC`=8<[fRI=:WY\Gg*d]J;X7I7?[hP*
%1OdYG&HCs^'-18YW#DF?>)0YjmZWH\><@.iK@>#*W#Cse8'=[goR'>KPnlYC+1=K[\`MSaXhRc75?kdpYf^f%^KhYjK)iZ-\JT)9
%phSXZe@+nHD9JjCleGdW\Ls>]0&F,kR^k&>\aK<?r6QQORijtcJGsQ_+@*7U5Vp'iD`#Z!cn(MNf3AfXjDnq?^5c"@f3O`TYHO_;
%qRUd38^!?07P^igMQZL4[S>TJ#L.c8I\ReMMQrGmJ/!I-%?SGF`]YZ(F9Z(HNH[Vp^[W]qQ96'ViA]eW(B=OjN%-ZL)5%jD_f)nb
%?O&.E&l2g^/[Q3iiO<nDlidEX^<B?lkK1cGMOV[O1]rd5NCO:""`sK51Cc(b$ol7s(=G`di/$98#6[I*n68[0+T+\bi/$:-9G&'a
%Y06lU`j3CDO!Q5eSP2moO(L_kQo9Q0+Ma2-WQE6Pm$MY<,lWQW5VSL$+NW@BF86Y4i]!<_X91tdMfcsWZiPd.4dPY`,mjBX%$C0a
%S7A7Ljc1]A+sTDd09V^36@G8ocsB0Wipl)>`l.Yoo[,32?QLj2OO*$\T"HURO_j!i&4dkIcMp:s];o<8;"o5-G1TkjXR8+\8WVIg
%<t`&j=.8-6hrT#TlRk+MVjO"0]h=N5]()$FOlaF-eMPqb1@SAG8lPbr/GZ7A=8jWpn%4)2+*DcI!HnFb5L5Pfh7rO,pZ9*WG=M?"
%^MHq7lMd&uX/kg*qcEbopO$:4h7rN!D,&l2s2mR$o2"[tn.<?g^[aR;-\$]BV/j^]c`_u$"+FmRolVp+H&f;(2gt+cotA#)?dH>"
%2=U-Ceu'$q1it9%O3[hq)hT2`pK;4j0RrV94`;4d_=Gt"<9rie_bee/1ss_A"Cens%(bV]XT"$r7MC`Op#Gf%4l:[Xjmh!#SierP
%#pFDt\7=B7cqM"hX6]*-LO5%D*q(eoY?(<!B`uVUs)_0dO;V!8F+POh)*k=(m!9]];Xjkn$(7Gi%C5L<j`/d5X&^*-_mo#`md=al
%K648"`@*R'.8pY\1aI2X@VPZDTS$f(8=/La:6&GEbK<pnc>om_J01@6<a&NH0k*g&OY0<PB2P;oS1U,i0OBjIUr3!_0d!d"hlIT(
%9VVH"%V)U&Z:6r')Qi/K(uuDW+g3mI0ZZSY=Ze1o)368,j"W8s[@4GkpsknAc.P@lgH@2,&dfDO7l':P8X^#l.&SWMaD>qi!83<E
%_U:E0-c;"5KupsmT#4AG+;\^>`B9:--nAT/J]PEh=%m>L(M&&MF`!Zc?-Xe]1pR>13FKSmg2`UjT!\bgmGRBR/1aTdG"`<PjFhVC
%H/9%:3KgSI8HRrC,X%8QdpY^kTSD&1jET?U+!V#Yc^?e#$OJ-pa@&1XL@`)9HDKN1:=c]?@s.DEam(pJmKBuYRWoV,j#^ebq`rsR
%!o^=YUn^3u.c<RX;"a$"n%iBZARWa15VF9ef#L=g2D+d;DQRDS`(QG1Dt-X)9-"-XB49L\9iaf^kK#UcV2gT'Xmu#uE<0"9r?])D
%6D(k:btXl^r]42pG>6]YQ'_4cf>)_q)@rU`HC/gPQRD6IJgns^AuUBR$S4aIPGb$1r92786#<,E:S-,qprWkm6s6WO#k"k=qSFU:
%H!BLYLd71me']VN:",?k-VKYdklVZOqmLn7RU2Rr^l.G0PK1k6'e]7mn3U\C/D_-Z%H9Y90+bu?AKM^XpqVV%!\ubSAdKrSE7S9"
%"dabMDusK9Iu#sbDbYlf/;`WKs5Q1oR%`F/?SIM3e7Ag_pADGs0.eU'5o.eaML!(6GM#8BH#'^1JHD,`BWcgd?D]i-/RZ<ZEGO',
%Ob?k6<?NC?K2(tt%ud4ta[gP7,X3,O^U.:0\Y/h^m:*bO3$Nk:6,#ZIqJ7_kZ(^i%MT0(a]69<2?$9ee]T]5a[AG6qPP##9JU+tA
%T?hhCeV?[72E?Rf]_XMG^dG3'/6cf%_L`@hp&C;2e:$ef60c`M$i`M3WJMd(8=@i)@.XjihU:t5XU4%I2&6/aR=0[^aVM:f)&E7+
%I+$_Y<=);%njY*C<IU=#oR*mf_$Y;Gi=&q#KCh:dqL>.hin$qkR?iVM$53Nu#I:5phA$9CS:qgpJ?Qn$a'7m/#][O8;GPG4l@'J/
%GtGRu^4']hT)/QV`8@X"eP-!G^`7jo'5Ns&%l=\LQn>r&WoO<h:fgNf/5i<YiBWMZrbG10qT2mQ7=+CeC=^o0bIV9uaVM^;YBTN7
%TkL<t8qB'@"0rs2V9=b#qjt8cCe9)[hH@MfLN/C4dd$ONEEXOmpl"n!3dC1t&HZM)6:/82%sUH<p^=3mA\!O`B1Y@pl\qh440LN)
%!M)_OkF$Ee[_qh>iZTOSUEj(Z8B(4/]U`l_fF*'CS4/VBf"nr@l(J&0mkVNabaA";N;qr:?10<>0)&im==k:G07e@:G?6ck.3PUL
%%4l/8DVr4Ad2f*87@a+OF71>Q]QMA3jB5Xa;UA:jr1>9%foZ9Jr]A+jmu!0;rZ!?MiHucRTC)!JZoLF/B17Y=8iA,fRDin@bir@/
%,g9CEVmgV^W^D=eW,?Gni$IEeV7oG4ClBFqNqGqm=W00c(ls,^cXe-6#2`FL^*<qMGJ.@W$?B16#3aR%!_A2>K%BN;,k2'J<Q-fY
%>PjK`hBFQH1h6clB!%)bn$/3MfCa77\fSf?Hgb^.]C.HA/-_\(8a,DeX1q.4Lna5IdL^9%0)R'-K!ng!?WjHMoSVhHq,dmee`#]0
%Mi?QeMPm]#>8&;(ZVenrNKjK.O*;IJ$>XIa.cDuYM`Ze)i.l-pJ?957fk$A)?foq5@H&BW/M>43TQ*3*$])sbmTkS;ejl4%&;f3V
%4;]tn(=^H0rL+;->LGL?WZSJa1J$"2RUZ5>GC.2698Q>+ONoCanH0c0&EtP,"$bM+,+>iBZn>Bj<dRER4()8[n6_ANbD+Za#2"`r
%fT]]4iemF/m=beY>#>2*h_3r6cgp]3);u)j6N>!?LJ,3*qrr4K-1&L,2NT#cXR^e':DEejhe#WA%F-ERW^WFUka/h`"_UNRc3_L.
%UK4OgkYJg/pp9pteZS5U)$V'uf;M'9MGo]<rSP&2jra#Wg[sIR7]ftRW#jRipO@8;@dPR9]oEH%>,1_6<(u[!IAJmoWB!.U9H>t,
%!^21mGM6TE;LO#0"4t_),>-(Ue<f(4J!9NN8&r#,V>C7DY#W5,j]]@\_9ssX'6hW.2/K)`K?aQX9AeutOQb2B,T9.S[u$[o24AY3
%$U9@"S9t5m%=1311_^G9)V*>@Ys_j,@^Kq*m/I>qL"";p;)?==\Zf<kSM\4[BrR1tD7#e1WInBVg_oF@cT;j-rJWs-cg(h4WLk5u
%Wl:p!g2E<];0SO6V2gc8eGa/a#IrN/rs!T"WM89]Lr;\CLI8MtP!00a(rg6[?C-X>+-+euqZWk@ARk@^e/:c/7rT.c<]R/qS"7UC
%g[9-VGm'FHhENM\[;r6Lkt\\mZ5Y]*V*[2rs4M3W"-fKmn^L$nPn15iUR''1S#oitbj=QhCKkWA*e$%qj"S)RWPcJUF_I1tAH\un
%F/4doA<PERe;mMX<?LD9dr>k3j6GHf()I3n=f*>am_=4^?7NFGA?jX0SQ_n7DmqX6CW2*:k=YuS6A1>j"$Tm[c2CWk=6[Uk@W/#`
%e8@^nX8CC#gLu9'gD!CUj^KI7EXOD*ZpFRXk<o/^rIf'_&*HX(R$g`%mF+G'-iK%=LZPs^oqPK&SR0^F)HNXK9gH2"59sd&T^l.c
%2#\D1'RhAoiTK],W3JeBPFj`MULRUPS7e&d\%^G2_D9f]3K6WYVl^(]`=7TV:3PYO>HXTQLZW!?9#Uo=U!`gL1EJEE=KUu"8n<8Y
%VF6X&+Vuegh"J,s(8G+$`_i3`nj5/M4m=g8YKk%@L<s=-)H!hH:9kGkL;Q?u)N7=s?.g[6_XE>7Y.*rJ2RSM&$qBP2Ce!`MkZaO0
%1W^DVY'iWJEtnoAFVkPD^nQHIl`+U_fCNF(=&GrCQ$E#%I^C#ZXMJ*YKLW'b2*u<u'&_2T3\5sXC[FS7H7Im1,V2R+TqSY+%[8e1
%FHU%Br1R8t+ZXcK9DRd2[5)a`7a)C3\8i6aDW8fEmE2Db.sJ%"\`6.MQ@4%j<bbC"\P&&&[PO7X"cf94QQS[Qn`;+3gr,PKpi7$T
%mMASqFc1XX7I(_6F30L\EITU/=H/NBZPn7Qb58)FZ1_[JFHsr*Cpo5sk^//EA0g_fHCGG'dmrNn<P!Sur;s5+fLrtB<l!1gh/&Co
%lKZp4)K!*sG'r)(>1ZGt*(;H17OTV:HAb/GH^!BLAEPNSEU->r_8^&gn*j3mb>k.l,eDZH*/B5]^CZ]pKZs:^%nj^"rj^FkMC7G_
%]#q60O`ssd.UbP:YP'[Im$jWh\0gT\O$4D@8!/<F,adt>fZ;UCbuRq@,'b!:$k5EG3J)$reSE_!7L41LN2a^GP%b4n2!W@LQOXp\
%pO:L^L;r*Wd.htO2TBX:<,HJ!$UrkNF48dn96F2%7Up0)gcjcVL+`,ZXCGd0DHqR\S"4SYRKc;jW1>5;,\KJL,=ujYPMfgZe#@'O
%"l<IZMJo`I7pZX[NDf)L'"*lBc]48Ore!_e_b!3eTF7o[)trLt2;1#pV=XP&0Q5;"30$c'9b%ZQ`S0"&)CH+F3L85knm1s4o&GeV
%@ZojE]Bi\l2J)\D$#gdT3+/KYQk>A\r^SSXgq$I^>ch%5D+)e/#nFL`HQJB=8T53O&Je%,,Q\oD*1BfOMk'`T$/\U%/"P]bOH29!
%iqC"W`uhWHCQ80>8d?]qF%=Rd\Qrt:2VlTgQ"oYD.'FmTQR9l@?f=D)j-HrQmu+Y!L\*L+migK7peqQJN3cn>(ZWR%@f0(96ZQFr
%EInnk0t\9oJ4'A7>5[ULm#g1M'(BO=2P)WV:iLMVP0Q$:ZUAgkqM?j3=OKlh+(i#!@;^k/9#-LWBWIgLZ'XB60R"F9X&4.,.Wb:V
%,j0dr\dSt]CkB"1S)\^tbE-q;I&U7%LP6#kn$3\Za)]A&K_2bW-_]SZ$mZ*jN6V?9UuMDP(LEPY0*``H09^VhEPmo>mj#S;%ACSq
%T@.^>>VY'G:.^DQIS4\lF"@]K,`!1oNN,XY?q,Uq-fE'_:JWF+W_o-+fp<\P_H&6[c=Tl$@552&Z'@6bX0>\WiHsJq@+B*T/?BIt
%]jB4J_7(;=_>*]4*u:$b<AmYAkuNtI4ORtHBS>IhiQhY*O</=oNJ&3W=q1q:"T.b0UK0sLFihm_Kh&OO9qiL4Km';@9kHiOg?E<6
%["X^Z,HN3]#A_5piAb8kk]*S,:6s^?*hkT\@/1m5-]+oMh/90_79D-A&hSn9Iqf1sTJ0U/<b8$#P>%4'E+G,&e[U8c-CH9K`%NI*
%.">d\gnmc0,iu_Z0GW^,q7=8ee_27_oh9C'7V2HGgnn>@6uk0]\L7b8j>"bF\K0C=P)F>q7[%)AIsJMkjJ%U%4)h6A;9]&*/kR>\
%54X'M,St$&o\46-74I#h>a.VaB&m%l&9:XfiKRpoF(u?Xncf.U9O<a'n[q7-?5$(m?U9J;@Dj7Y`@tqDX6LL52\,Fa8*05!7u50)
%s%3no*g]J`\$A'?/cG8%)ciApkd?oD20YeH&s-Lqf-Yf\U=[COYH9Yf1,7BuQaml_W=uBld;&\uXYqobDO%Ibd:s>sp7KoN]dH.%
%6TEsE23K4-_*:(a*ifCYaYLI'1@cd8-ijW$b@n2?qIJa'nXW",O`D(Fp;pS6&gd;FZlKo_U]Pa5ImrJTEqo6F#^7=[9pV8kP]%F5
%LIq$%TbhVb[*lt/E_EB8N/gQ]X1pX%0=S/,Kro`s3\ER4LP;1bUmAoo.a:dlP;62j,@rq.gIT`<$GE=O/+c-m(8\Isd],0aW)C6*
%K23u2%+bTl8]@#n1QDA;f5N\eXbjc\HYd`sDqESU-=b>N0o^ZBH2+d>^"+H]FJk\fldNmjc.q7<A`RdO?b*D]ol)IU+rHM"Z!=r%
%`_m0iL_H=*=WqEF>TcUW\1.rd%gRH+3:ptGgJe@FL*k-c/*!j2C7SD"<g(.-XH`;#b^km82A:c<c`T<AmaDJWZuNTJ=7kHZhO[G^
%*"O62W8#A3n<r)(]0A=USXf`Ri\`d[^I'D33,5`]q=9Qfq=!DBGB3][+$T_dN=I>OQEcTle!lm':<n57B>.G=e)\_sEooG]!RhVk
%_bJF(7nO$aN6:89O225RQVL:[e6oP3&sWcjF2#Q=%%[SoY2)&a%r+=C@I_(o_nrHV3^.F/q.c%sd;oTqTc30#X\*2I2$m.sHAjP$
%_LSFkf[kGf[J?b>8r4A5,XNjF-5!PW8&u>1aHJ=2.#5nk?f!lE@59Qq=&'Z2<*c1l/m9DY/=k9k^6`TrW3t'0MCZ)(=M=9uE=tL*
%`6\Dc16_LdkSQsiT-/G$r`uP2>??6nA`$[J>7O<7g]Zh/AU9[s)VEM^aC1NbM7pYuQqTll:!&<gZ)MTLYnVQ=qegDdaLnVUULlY=
%cq`B+?'dWj8H9sV\'`2(]Ku2U@[E3`<dM2iJ(;XR]b,kP/sF)o,k*Pq]M&A[PJG@D#$uD=705,'$H)D#8`4.mGaS\@-@qLTi8phe
%Qf/fR[jTL7A-,=!g>Nq8#h&)K7GP>0c*sju`/V]Q>jbjWGHluM(Rdk-fL->l7_RGB\^]=B936l'`_da(cfl?r<IARt9`2_F`>D``
%0^;(ROqc7<Y8*HB=[nAHk'.gp0u]XBD5tHp6X+f@6Om>q-Ca$dClX\d9YX'a;;5;nT[Uq-&hp<!FT6iSl:^/>I4;dJ\:5D4CHj.Q
%;Y,BZ$0j?ADWMDdJGs&fnqXc0N;[nmg@9/=C16suW0iZ,@j?"#^'1ifeHXEfZh2j_j,i3"A@^*$CU.q_o/jTqreitUY:,<KiTe[X
%JPkIOD>gd,M2-9?4>]tS1P7"G8#_k('hu.Vf$:^;3XLm>@Ufho`(5VN&gLnB2TC6anMfh\MruohQ?Lko3;bbUUtG7.4,II+K2Xde
%@uR,_I&l9Er[iq9,f*n%a-ae"7TETM$We]qN3R$<,`XShEK'pP_[-jU'dh'9]C#T#[C4sB[0fu(V>At(Zo]\$'4%L'CHX44+#h&'
%.kGVj8kEn#8AB_CFWNa]PR7_+$=i)t,cPudD-(n:M;Jt<?#Sb3+_>0s'Y-42S'cO,qUU\,Kd7/F\b8CS^>GG/2mQ*?[]B?uTqS_?
%1mCC.9^3$l]u:GocHrB2d+.:!E6AY9g8^2Q[7V(PL78V[P?V3PaN,Y%G,eRpM:GoOk.^J#.Nf0RpiDY)6%:BRF3neE[EGp+NcS$9
%;CCN4>_[ai/s2VW-DB._?1OEe8s=o\DGe8P&l_=_h(&d=P@Uj/LqP0?39-7ieMT`)YGu%#+,VW*l2uak+IdH-NY?ri/NQ^!OH22P
%k6]/CEhG*[qfLi@?.]0)^>-K+jsJs?`1*6@Et`J0ilt313I#TObcZd]2oa_0/PH\eAc>qd3Y>lccR$AAim(9R\VWC,ET\r,QAI\i
%^aaJEOZU$ch?&Hb)%mULDA6?e7#P]J>e2l%>4JC#-J8TA]0DXtoUM.U(r"mKgV+4Di>qMEq&6b7?&;Eb4-TN.\$`BW&D,(l;-q#8
%5fRauEg(q#qUfJ]j"_LLo)8+%8*-so[ZV8"XWA6MXe3dn6A<\8cZ52aZu.fRA.p_:>aEbu(c@V[kZ2X$^K(JM'#>SgD(t8+6'D[>
%k&-N')t37=qf/(g&oh'(FnXg;U=dYVo,WQ3EXB#aRdJ+7=GZYY@5?$!YPGEl9)MDcA$[%!.$gQhcIJrmc14G2](8'S(cu.k;DINR
%4n2_US],^*"5]oG5[T7qQR_AjB7ZV>_d]^:TO^r"VKW?apH<AKKbA=*6`A,uVp)&dM)Fm:Z3.E0IrZa7"?*[H19osgf%e%'(u=8B
%Ku_3-]-Z#o!n/a`h[M-cMd;'l?\2!-T'b6=oia5a&VAgk';K5M'`C=mBOVYRp5//%2*BGZdI#^o-Y_0W*ji\Ef\Oj>lVZ+6#r]N(
%,R`^MM!H;m%TaBGl,1=Yk'#S7%80c+OlNC#PD9]>?PS?U;X:\&-*$`)<\!pR-&O%s"]sg(o]ZE7dbaZM<GhSO0IN@M+(rNjDiRD.
%Qu%eXD@0/taO-?fakf!$3;hD%`c6q[:VLXa</mJ6U[Z9Y++JAJ@jr"R)F!1]_e3BMP]8OIDrk'6rC`DYa5Jje4LUD-02,=Ol#@$0
%:5jmqHV1u@fAncJV3XalqS13[FWc;kk*JZh@,,]@2QLiF&q$6_lajJ^g1oWU(AYJ:G8>,Y:-8/,13RR,2;,t':aBO*Jakno<AJH)
%#]5NY9H^DEVB"Bo9"Md3cGnetlIP(Lh7tNZ(M,;_8H_W!,Btcal!@)Ni;29^W4JI4n8VT"@rG1r/T6]F`d4V(RmK;+<7mtciDt2f
%KFD?&S[;9$%P/IUf1A>PIBA:+:"J(L_VSCpOkV-l))#QsDS)9!SVYt'`QZ!nb%u4!aW^$1i(EK),HNeaPC/S2#g,96OC7]4ZdEZ<
%94AP.(l%B'pC>3^BcHNf#H,4GbN1s`$-(B1\Z(<'(HEMF'[&]tK,]7GdS+i%1_/-;`Qjen1!B[^E4]0,V5J9lTg]DtND<*rhG=.F
%J(o,Fba6Y!bAI*h_r!7;'?V)+7o=$/d;GPQ[_cd(&iEQKN?ZVed"a(G1`)J$V%_PVFOPkGXh7':gP+*L5$j[RAb:W]M>lc;!S"9>
%+#(3>L@^pI@p8fF@IR(=J%pL4JUEc#[.[?_]1M>Y7CDiab3uP_k<=tiKV[0_Om$VFR.-R#03.<!W7/gYmGM'9&qp;AL4JX<YDf@\
%cQXl&j*H7o."5S9N*ZXAW>n]XI%*Qk32>^):V;$LYJ(Y9#E^4<Q2:!l8/;.p+7<PtcmV>O$tk5\A:%lH!&8fH)GHdZYT1&SOW^rV
%FH`-=IFt;B1g:D!H5!-*`nS6o^&AQApOBdYqH<42V_dV_(pupGm:4F1Unu0daosAFrc%mMjeu5"U]/#7Q#I4ZeHgKLq-'It+o`]-
%[R_l[%[UW)A-[&M2Ro0mY)]4WbuCV6Iai,a;sS#K6)#hXKO*;NUK2+k<aIS;7VZWj$HqWMUp_INEI2,X<*/=&AjC)aC=^PpcH4#8
%%Qj&Y^"l<-L"5[(F5%,(-Z)a^WSLak>sCQnC,q0/S'c6AF[n"sp7;/#k)_DaEA."MeODaq,5QS!s+=Lg[sS.1HRSg?qlpfar3T]j
%$Hmcn]j5N!ENqR7"K<0L]6`*pAo?n0;(AH3V8)'R\;k&\4cR?Kl_kRWMCG\^8()k7LnYptXcfEBQM$?`DgGBZ>n24[BO:M=QnIQu
%U@Zl,fK;5[;HPP/2,*6^e&10XfksK<H<;`<5U5E%Z!PRpV^2jienZiH"'7BYfljFI&WI9G/S4`ZPJp-7orqn%gKkL&Uj(.;#I\J;
%`J^60i@W'd>9XXi>7j"Tibs<>3obc%5-*6AB/Njk-]M;B4d^Y7GnE!L8#_.)Y?#D?=DEO[V/iOM9>B`F^>52F]\[[;om>?Hn)8rW
%=UD];"#j=dV=3I[Q\pR2.+\B4`C8&JBBuFT3sm8Zjcq#e$CdA=1jU&Q9'&r.8s*_hSOLe]R__&?-NTB89=?t[6kdMgC(+kFANL%3
%WQjXR<),DnMl:ct$<XF<>.$u+%d9auQeHB0lU:;Ul4&VHVKT[DNI%AL+jG^PG>:Bi8*+AlMqC:N7#d1RP<ZcdQZ_#"ed>h'C:^Tk
%Di4]cgb?,7CsGor/(5Hi43MNC\'*l8!+$>&Bq"\Y?ibf#4jX.q;8'>RnEO?X:0gH(8R7(@q0O\X$KY0VecX-i^M#d#d%$Pkd(Qn]
%4dPkH9`*sP`$Z1?2Ga0_$,u]Y*1b;3C$TPX2i2UOJ(b0d-/"X-KMGK?mC-j'e4-i:e*Q>Lj(D[^r"WOBs+(-p@t)lT=1MDgh=+;I
%Me$k:g-#9S2OZ,uI:I#N%gL%B40rYp^E%Z!<GU.$&HliMVYqYV=QYZW&i]c[K)=j>*gLuJ*.6Llg60[AGpm9>!^qC)s%]9_k<uj=
%!mtem?Uotde5rB0ObD1N(Bc.?6G#g9mN5C9,D"t$<8[9@jB//DN?nI`MWf(:`-)W/Q.BAa8c:U!c2QY>j*uD>[qdEOO+3,fp-&i,
%Uff;bDN>\p%F`OgVV)7i>`&39;K6[3BV(&u3>)\S(l6eZ$SaF5Lu>V<N56nO]H4s(ps$P"0;Fa7UL[_*c]dSgCAQoLeo?DI`9`;t
%(@]gt)PrY67uKKtMk*>WMI?**Vl?`)G-s:JAd%L=,;G6Oe-_+E?i>`$"TN^%drDlQOj*L*ef\/'Kj(5g'e]mQUmAH)Xo?X@VruFC
%Zr5S:<$ti_<f?h,ir#d.D-Z;4M)ZX'$dag,V\a[PO(G3>G5#o=QuktTg5SltijeDgfPG,AE-W[X8be87botT&e"O4`.mn//h&RL`
%h=$9KH;<oCd7tn^9<TZ([sDW0cc$<uL_",1+79?THQ$$V([Ko*?Vu)-C)fb"R-'1+W*!e9H3j8E8*",9Y<1VsHV[\B[;H+%<N:'R
%;Wm(FR!q7s%f1dt4ZK1`AOuOCN@/ulg!'%EhDl\@*)$\'38ga=?T]r,mXb^M/f!M/j=\[NU3KrgMZ_SG*c7mg2_BH[*G'K6Y[!2a
%=jEWhS8Vc5Q#UJY6-l*?(I,)h.khn2biW'-IRLh2)u.oD;DNQi3!cPc"#hEuGr)I?MFU1gl2r6Op[d+d7eO9Wl8^(+7-L\k3\%Ne
%+bK2b*!Q)FYFee>1.O<*W?!'n`88l.h(.5]_T#aM6MnqSeGo;e1Eue6V`;q:):32bKs4FLB60Nb8&ln1`RN;]<5)6+hO!WY2ep$g
%l07BcG",bp%(.TcLsc0Wpk)bZC);oEHQ*aInjcF3U)q\L['-%\],CYF_&GOLYB?C4*bhtI>$9gM[Gt/1d)me,c-f0@]OWt6J.`s2
%-`(CBN8&+N#a/#K*"X\5*>R=m[r[rK5^c&5IP/g9\B'G3GN'OLp@u9qi+/piYj6.Nl,oYW)R4)AM,k7:NTmFdWs,:0LT=LB4Kr-F
%-DZ!diAHP$?EB57=mfF8=0'ne+$VC#:q;_)_ldcQai&sn[FT%^-8&L4e.cB@4TN2)gRdRC.R2t<@BNT+)-4W(m\](Lf#nc"G*BN"
%j`3TS3ehX>m,<6'X6T7fZtD8nfmC^!HH:*NPJV(Beq<'Q)<"Wd3Gn@KeK?Hue\X2.rMuN(lEb[5T#Zjh*+8`8Hc?&"i0f[b6CULs
%L6d%_9JhWp=p'NZ5UAi#<iB#4s(EP`juPPrBu^E(_k@XbL3(<BfKd-!Get>D(uYWSq\#1331XS@MT!$1);eoj1q[:&NHJ$7`P<jM
%^J6Pp<MA-*TB9EK()lp6WkkNmC6cq5kWp&M_g2Pfqf3,1btR^c,\u^4p<!R9UgL\;%fH::kL"T&eVZ5(]b'\K9r'LM]<8]4BS_5n
%K\MZ=D3\;\h)o1-=.4-)hr--YmSm7_[Etl&YE=LuC+E46&('$9@rP8>7ScorEbi&&PdhVBkjY@OdCbLorDr4aCTkKmru;6Nm^;-h
%+P8W:bOL5>;Be=Lq*Q,"G0d"dD75LoKA%$_ou;!RlVlN(09:-L%bRV$;3Uno\3/BHZ>+Io,6)B(=sW.:3hR'fhq/SIm"h%?M7"@1
%]>`?4KC*qd2\#AK;J]V#Tj=@%lfCG\?dQ@CGpaE"G8Yh@]7Au9-/!aMgB6rXEp5WqU_^@aTf)m@;FU9->3#';%r,Fk9l<gE-h2K!
%VRXa73oeo'6a&RhS#Vt8BNdQm0JW5u4kZ8sX/4HccgKsS2LHlJY'Z9a(X/](l*Y]=qgA&jrU/&X428/o/6H$cB,V:^pQ)e\2slmt
%FLq"^8C+;KHV]rOT!X*tqUW^%rLJ0"e+MClS+XPrr]?[Bs,p0Un(jO,VrsXId:7T;F)C+/mQVU:D*;UGgbA!3SHdplAA(bdAU6*&
%P($.$:KO/V:M!#%VeG!NH2[!^4MA7OQf"ro.;V,egD,1LCATNBnTID@+1s6Xj)'A)B)S'>SR0N7iSb<QrpJBJH8Y^6D\$NKVfsrM
%qt0"l>#"BISN5H5l.,`LFC34VRKlK1b>WQSRD$Qd]i[,ee+HtqpkH8]n9/g=bG/usGS/B-^fe'?NuIpsYR+u\Y#FRC=O/";HMFuH
%hQ<EQ*?>tqlOWRRCrY=ZI*Z,)>27@DHu%$/YH?ZfLu*3FerK/LJ&i_hI5[:=dC)7qeX2pd4e=[<OI].=>58VSbKA`<Y\\]4D=7B$
%pMBe'j,*(c0:fTXMsoM,C[&ggV:3S^KpX7;*IjI(@,\.rc,+g?mfhA8l(&#UB6jol?8uI<\eG!%TmHIPB7cb@il4p?@+!7CIBp-0
%SZp.$Zhe_BZ#>-IcBqC/hn@pjmM-hiY-'?N/"Y-nk2b:[L&@^PLMO6(\+cJsIWW?+Sh1cI5Pb#U[+Za%h8eqKhXKSI&eo!)^1Ah&
%PP4j*oo1!DI8P6[.m89g]WeiPBg2@d\DSs?D6@fhp76Bcn%Y47T"dfL4DH`99r7.Hjm<!F-e2JdUkj@<?KL4B9Km2Tp=A(BYHL,m
%hYqi0o\t*]H'Jp&X)mmc>1mRQgK?Tnm^KMUhG#(*5JJhP/d<snj>Vr8GNj+JjX4Vd[Hu*WH/;HjfZlA^)s5"?n-KJ6lK*(*HaB$o
%Dl6AI<nFG5Vcg@2\F:bfpF,>\Au>.>M]_?alIOO]o8M3>rL8N:n+?7b\X8s8T.N3+I.fFgcG*4%]T$/WrV1XG1S)r&S%n]3.QtQF
%p07CMEc@(n?+<O%o]i"EKQko2F#DkMgO6D1??jng5On9k,(r'AS"?)I[%*`%TANE$YniAJ1EN[XfnVX!<l*U'j(Wi-EVVtJIVlic
%^@u(_P?rJo[@4i0qXa%FilAI1l-.Q7I!Y%QoIt,]G$h,kVAH)rl.2E4h1"I_S_47oe*d2!cY:]fCo%"W>BW&0=3o=<YL9&l.g<YQ
%Q$t^i`_/OBoR&%bq";OgoTQ;cOBu5,QVZd.9HU.`AfGsBlau&GUn>o]5GgA_lI4u6MsY>,1RpI!Da.Qq:[cT?)sN\Zfi!-G@nWY*
%)/ilY?amdFV;KklYGL+u5!6e<+5ag'd[sm45Gl183;:llYP7b>`OGM%l/Ucuc1G^%Co,HiNG%Luo"/i)g.pdEqHMq'[rgrMokZ+k
%&[nU7l`45gZ`DQ];fejT?VN-5*ZJ%9c'^4```BT)AXcm=)J7.f])6ruhnD02[Ba'93;)KQpgEAYj5%2Dh!*\peGA>EC22eX7X8b?
%j0P;US`5s(g+0q>:;(DU5+$Y/d"=Mob>V>pqru"tUC%HY]Wts?Q!Vi?.b"&d;tXFG"2hM6^2g-Lp)A4QB@Z%kl1rcTS*@n?pXuof
%^[n@o=aOT2YCt0b#@CMlVk<=(I6X:[I_IW:Cu8?ehL'D<E-h9=9/V.ep#4p&]BT.'e";6ge9&2>2Q!75rQ=b6lbupDB"GR?4.U97
%Al%hgm6!SHF8(.OjNbX*Vl+`tPo!fr39aM042JtTDg*89W2K+Fo&eaicg:#XSZRT)cCMZGc%gN"A<rkEq7-'CpJ/4\rSc&ler/!=
%B4%+p48%1RbY3>ZrK)c%R=2]\3O@)Hqf0X2%]_C'/%[M,@!hUpbc5Zq5P+O>jlt"?Mhgm[qd/F,be'k*gR6CLZYqY=Y9eDTlf"2d
%RJLos17KnNCA.'un`=S![Si_thUK^7nuhdsp.6\p8&NP7F^MnNh0OEKSNW@Rs)@]1bGRk:Ti"^o-^""/[[M]0R;FV&^UZG\I'\'A
%0j8mM=2"Tt\\%EQjl>1I(H$>Z@qWQ$GPC-ma*6F*k3@.T[njL$*kUkVmT)5)%e$jOSih`c]_go$H7j7Y]Ua*GGBrW8=2-W%[_D<U
%DMrVtgd-(4G4+D2YV9.+?Jh8'Y8Zh6C\>Zrr8#o%0Y`iVfU_ap2]p:/rnP`A5Q-mdcL5AjMXtbYkMFF4WMNtGQQ@/TR/(Z3hmk\0
%s0cl"1](VWT)0u:mG?l9lKm@`qbD8%j_QN]pT>9[^3<Nd5MeIPIJRod<BL,_0L('XBu0@ULC5WYVN)G_?]=$!mJH_M_OI[:NJ2>O
%3OA3tbKh`HVY3+jk5O/po]gj?I:N0RK>lQ"qeOILdf#_'F8GmJ:V6?!_A@RdIc]e[c/M^qi,!CQk0_&?\%J)6b\hoWZhU8B>[)UC
%I'a^)I!i9.Ga@#E?#6.G2_kcA+1<rmlqoe7jKsqU1+ut[]udqDHuLGH^3K<%;gr%)024U=+"T#3m2[eS`G&s6f7*F=BkOtf0>2l.
%r::PXUU0T0p[aM%2j\r#fWV0uN5n]'DEMk):)gB4no'J^QaUC'Bjc!o@r@Kb1!T+]-1g*pr2I4=)I)@)RV/$YB!,`HTC'A$B"jP9
%QM'b8K(Z(N<jl>q5/4G\hTJ$hMUB.NIG::+CX;2<X1#(k^XtR0b:@qk>CCC=$LU$]^M]Y<C?j'(6,TXt<c12dI,N8LkO01`eD#=o
%=t4iBVl?-YSYi`4G-C!1DnIO^BeD@)]NX$WG7'6UL@ag34jUfcDtUC$RpVbtl`3\Um_RcZTmKb1/%a\jGI-/>O37-Iq;OGY\>Ps+
%]_,SqZHg*lUNXt!(9uP/mC_s24F:-'?fY7Qs8LEg[U4@NjD-H_o>D!;kf%GD3r?K0]NdOH&:B?&d)u))gg@csHM;H*H$q/:lKduh
%j`f*dICXIh0MfTfgj)c"Xf1%(op'q(DKFn^s(QPNpu_D.Pu_S2H!nij3tIqD^6Ti,Sea4*K`9$f#N(R!IsJR!pg*=HUO0uULYLd%
%iSib]4"hZ+T0)bAqbLQU*^.^hI<r:!inh\M_tR@HJOfB2IJ33j@d`UQU[?(!a#it=h8eLNrVY\F4Udo5m6"[#P4e1R:\Ns`dSGac
%Z[+P.q9rKt%R62`CW1KFff(9sNjE*]L8V(r+.Rab%:6InX"Wa-A+fHYe*5D/UTd#$j>,Kals/,qI$EB([@ZQAO.O)2hg*s/k.R>Q
%B)_U$-BnK%jtrR2J(`O_>FKt>>$L[gc*+hWR*Mk"mT&,GhgP+(\\>@k)Q[jIB<TmIG$<.gl/h_r:RsrSo@&]pD%-%.dnF39l*lBB
%`\SiaOaEDOD4Eb9Hb/q7=liucAE3[*Man`>q>%35Y<EY@)de5qNT]nMC]!q&BR8Y5rk[iskGPMY7ka"J4u?V/I/j$8$hCG%;P'`9
%k+(=R\,#O?_Bmm[rO^a0S#<GSI,15Me$$5%Pu_s1#HpbNf%8H;o_*l\Ek7faf04#cEMg4S.h=i+G;<Cg.m*RQL:-V]WdTB[gY1?:
%?0a>;hVEGSZ+YM:qV6CbrcHqEl*&^9?L@r;1Gm>!irsXUDf0:@fR%Fap%D_h998fsgTR4;01E4Np7Eu)*US@5RBI^.V`l^Qp]lj%
%*:,<(m2VY'NfRN&/%hI&[JJk$nuMN^:L:bM*3>[DG!8,I?Z2K!g3S00]CtpBr9D"j@GYNjNaKJFn'=\@BcK?@Hg<lmo_%Us_VE;g
%PI%C.]7hn^]Qa0IYE%IfqI'-fdp_M9rUT48j7`fQQYZ%?C\+#;bi@j!%km:5cQA%:Nui_>Ioo6kbfuC/J,FOjJ+P2g.5OW7Hs530
%55Op:jo4D?g-OEhX?q.-o1o/\n`Q'Zn'tk/eZ6*qNB,HL/A+,OpbK$2g0\l#oBaZ`&$80CBB/2cq"Vts2rXW]]DH#`A,#*4b22RS
%dHffXh4r!'UV28oh0Mf5'_\$YLI1CI7Tad$T6r6)//X@Ujn4E)83Jo%B_UK_eYo!BffQX7I4H<+]Qr6q5!+4&T@fICEO)o8H['S^
%XJJ_[QdqAMh5/9[e+-Y:;,SM!=%Y,Q/Uo0K[l7`_IW]iB)di>(/l]R9:Gs8c"gd=Mg$=%:4)9;ILZJbV0E(IR[M`)BhGt[tSikZ/
%<'FOPc`;9QK"KR@]B7.K@EEar]C0<7[HGm&2mq,07h=mNYqo\Ch*:g8Y:ZQBdkK\W09;WAD`5J37bZ-UN@1,iY8`8k]Vj$MRH*6*
%4mG)EQ[#ra:1_"uQJc#;%amou3.G4N^D`]),pM1*>XD.JXBp'QE'O7AD7.Qh;S=&]cXdaeb(4i;H<+pl15/oD-f[d-!?9Rq'^gMG
%"p$bU!Jrb57%F3BfFt\71kiIN)s)+0A"0kql;s!"0+5X)]"@e2_t^BKcPX028e94$Fh)[!MQRI``K/`Q<GR<;7]d<bCHnh>A)Lhm
%e`@=Gn,U"8Na%auQBib'Z!/`F3jGbZcO4W6C%5Z^.`NUF9qHlQEcJcl4hE%]e=gl,&oD_8XFmFTg7);ch3/?fV90RjZ3f7U=la=)
%*;`?'*&PNY4hC'g\,0,b]:aimTB.)`P";Fd7[.YY7O`a2S8(MF86%J=j#!d5Rc/J3DHKV!nE.8g/E3`q_BqI2WZa2okPfQMor?+E
%VVb,4fD"3q[<AQF$r>ERWCR/[V]cR6#trfJW@IjE4YhLO70@`T:aI0Y=uAF@&>`!h8f";HU%J5=gY5+<P"M^/cpZt.Rd`d(cRBC\
%LWRV`4CWT*AmILd:8lZ9[B!r=/s<bS6,st=-Pm\tqV[X7\@'VM8[.FP>@Fp1)DSL9DI.g)'";/E7JJ2jH<lDW,\Xk-SXbo(!OLGE
%3J4h:50mTu^90%[qfYukMc06E/;=1?/(*@M-(4(jromYUnY*@5Ks'b8mETkWWA3)$>3C:ndW:og<B,VESTH`kgE3iC=]aje6lNdP
%dQM\EZI*1jNS77^g'iI#*E@2EVYt>AJ7oSXjD*3h+0of!M+OQ(;C;M+\tu+RK;/r"g:%UKN4aQGrJKXujQ0E[2KmDm<L4a0olBdF
%3a[>nFG2\$h=n*0*!T'$,uV_JD518W<IUN0=*,Ee[:55\\8o^&2d#F!0hb\KiF_)rV`:kkC&bcV/s6.G(agagFG#gMcBcnX%jJR1
%K=,O.FcmWXdmtZ(Q\fboYHH$/3,atnl-6<9S:QiSn($ec%_POGkP.`]e5m=G>5M7H+>KpLbH?CAd$mTbI,W@::X,[<Q6oaU4M?C(
%9V-g4:s@8QlSH?]eZu`G.Hf9-Y66+P/*GBYXrM;nI=u08X1%_P=<]fi3bgm+LiC%t!MsjHG-.VD.Uahg3,M`WWaVm^F(L\%QSk/r
%31O']]3@/FqM-?%V\a4]S8Zo9:130jBQk6jgm<=i&PCnjaZBeJr>.$14YYb!Irm!Z*"WV$QHO8NQk#8q?1FLIHKPXFc(G1ZJe7tJ
%.3lkkN`>*rFV-k9p4ANCq'jL,k`#].k0a5.DiS&^]0\HW*#>3X?$7M2L!Z,ade]&/9Ba2OUunjA(POQj6^6uuqLNR7r9s[>Qq+T6
%9jtp"<<bN$KDEZ("_@]Dr::)rf`U/Vh%&W)`m'RJ7!Kj4_CalR[(K(;,Hp7**%`hYkt+nHc+pud=Y>;\Hl"<jY(_&%h6UFi5.=Df
%:?nXa<m/&9HUt*5&"n*4QgOC]G^^:(kOPCt]F_,'hlbP'Q+7^Zp=\drQ*<&"NoTodUA4FOcaFHr.fBKGo1!6.XlJcOF,`,Y-"O`Q
%SV?Aja[tAO+a_"XZM=$L9XSbkXRV4DR(q9,q09UFqDG]#h<b6F2G;r&rR2=Mm#nNSFDe\_4lY7lHTF:tX2T,/kV)e]f;;p.]b7`-
%qPS4GDEdae%;S,%8*_J)]1O!h[bQi4$nJ`!g0Ve+$jWfX[Z-71-j?PBcZ=]&D;1Jo1/2KHP"$XWS+1o^qZ[qq$A)4XI=mLL!E<[N
%o9>`Mks]"/OsQ44"Ki,oQ17Po,EP8["chTFoW])!YV(@,PXc0SbM"<>\o,Ln9Ue:R`c*N!5TX@pqU3tmoWa+)Ss/[Z4ctJp8,E<P
%2K_;mHEQ6s^<65*@rk^tZKla#/T<M+$7tH\A8H-S-t`SlfOF7iD/5&qiFeBJm0c604ICXa9pmF\T]*0CdF/@A=4o%VCB.@pMn&h1
%n>Asn9q#/ATrh&8oF6@Xj@T09m:1$r-qLj/]euci=0i(a]D$&g=oX,-LrIDW>a)*ZC6fr60208AX<<5qc8&O_Pi;EFD3SguGX04:
%cXWBKTV;H5.bbii-g;eBU37F3oj'h>(:IeN/6?CF_dMblF:gY.SJi+g*SU^j/`IO;DTYjP-6NmE&96.l>TtsqJ`B!:n_h21W?udj
%.\PJki1!6<KNqY:#K-*4nkET-,48o!<P8qq\!H@7^$V&V0mnTm)AsKhfd*_,?muNBPDGZf#bRZ-$jI?^0R)9V+CC5;!!IsK&Ml"C
%\NOIh=3DlCfoUKJZ/q/+AK0.Gk@Ho>EttgX91W5oOgq!JL?Sj!P&4FGYaJ.A=dn?(6bK01,i!qY2Cjugi!9^==qWH@*=Kh?8Jo91
%f*!$DiJ^Ej[N*.#3bB!%n1:"bF3r&@b?WDHK\[g.=H8fS!bMk7U-(d;-Pehh_f='X0SrFj--/<Q&BLLQ'3HN"S)=h.8q9q,e)u;L
%F'HPY-a8'hJrHB/Oj-Os?VWkhIkLP`PDo^pn<n*g/KCCYa7:?^%b$E%-kHC7>S8L;"$'WGZ=RL%p_h7cW?ca64YGHAW9Ljq(3>BZ
%%es2&mgS<)(l)F[/2<AWf-*GqS7loP1hc]O.<LcU"TsrrK40G.K'HrWcq8KjBR\^0klOALO)(2sgL)i,Kc%U!)47m)1iR/`<aZ#_
%-^l=1SjD\dTUj+*c=@rZ"OfCbL^%umkn=a\`5O'6dC*TW*^gpb-dBts![[riWuWTck[o@aB?NKu"LK4aA!<I=pRhME%m4f&!RVYg
%-r#HI;!J[P^L*nKM8oWG_VcO$mEYb%W]*V5L=f7B[95mhbIF]+H\^08b;_(s"if5K/J2>lk"o8QW_!9W\;&0X"-f++5_HlBi\a1X
%"Kt>TRSO$"-oJdR+CQOUS[P-5WfQjab6aQ&J[/AX8_jO[l[BfMJFZt0:?DUl>c_nlL8:/AN:Tfq4W+g.nAN_LUH>G2N)&0%GHQmR
%!NYPAZ/<EaIfd68V)MV&(YD`uP$Ol,C!UlhIG/M+)$Vq&lpnc6=TMMoos7dj/&;L%N>^C?HsROO/On1P!4f7B$i,3<8RG77#EI/k
%R`akDqQ'g5MS:&)*BmbjZa&N=5?W<b8K8;a-IW!=1M]Y39I>sVX<MI:X;3l%YsV-JPpL[TfT;nG_KHBP9njceJLIh>oq9AgdXd,c
%K@n1UW>Xs4CoWR[9maC:d]:R?K6W^*]=!LO=Nkgp@`+A'L(9]QYcPr4i)OU0>*2sO&g3iaP',^Xg>9<[6mIf9=9_QUbUhZ#P9Ip5
%.Z7:TkuS%Xh1-^>*So=%=oC\WP=61A6MIlJ@$/Q*>+RY^R]K$+9*fmH;C4_.(Suj7<I`X@+feg]*D7_>Ft)(q^?rcW0k`^rUd6/'
%(+Ei'bF'mm(b$_0U`;d0d"VsW6Db0MBo?7COu!_8[\hH=N*b-\!PCgh269<r<3DU=,\EoiUGe&H5Y8i7JTI6?OF)U38C8mS^Ljj7
%N4>M`REi*(<<Pp0b3jf^6q4m<+O;FQ$m9Tg>QHj^G_do##4GM$)*Bf[Y]*0EO+]c^l=>]$Y,VSZf+B5'ODO\^-M]M?&VM(NWX3pd
%&]hB%@KqWNSNoHSD<PDbR\K9@7*FY7!P9t7-jsW8HblR#f!E"a=*!)==3iZC7a5nJT`]f#k:%oWYb5:<Fb=q]>tQP^!Sid.W@?s)
%d[)L78(5qkr4&pR<Z@\i/3Xu=$o@JpiQlKlpR?lP-3rE>NT7ku,q2>\K\S??m=>;rR7q(?m(d0DWB&dlpumTiV6,f+H'pFEMPY_`
%!>#oe:Qm_0!g1T?!A.?_I\=VKV00RSN_0,QATS>^eupuT)@]!&!Kb*9FX%,h`9L@MhJ`/jos&=9&"DohOr%oefZ2Ck2dHHHZ-Jgs
%W8`mMBYqA<JPC]Y6geY45[a\(#.E2TWXBO>m7\`e$s/5nT.+/Za&%rl*[lXlUXP;u(e0nD7LZ"s3[\-*i$]ofZ(<e7+A?Q4&Af([
%&cVpR[UnFH%L^=95oq[b\B'CXcG"ie_6G-g)lLgF4A/-j"3j?gMRGdf2a%1%fPko#F)^@\)H]DD9n=d$l('__nc=Pi!^/<L>Ch;u
%6dO)4oq5m4V0+Ce1(Zhha:Z!KXa[Q^bIMu7Wct.)m6E34&hn10&qu=\l[coD%",<>T_CR,6,(Y`!?fjQ:_5oU=X=3I*Al]/0#hH6
%R010RI+DaZ6;X!$mH\Pd)jj5._DHB-R_X)7N-,7km_%2\!AlW+SBIdi&jomB*[qkT"aq@Uc,L6h$/:I_J]!cj>Y8+-"UQ3<2X_+-
%F+%5b!0Q1h!Qi?3<j&:r#-d8OI4_%b8Ldf`+L^a>QjD'cj99cdYBLcsZ<ZWe4iG3(k`l:0D+ZS*lool'@%>;nRE>m>?!j[5)D$]t
%lGL!X4S0%_o^Ln+-W@8-_t!Lc#CLjN)K9N7(S\6u%1n;Gfa.6_:kX$a,kD3.^pTE:*>`<4%`Z1`f4^oVY6d#e^)!n)Z;4b;M`hTj
%)0$LFU!.VNFTR+66n/3]H.IC\96<+3o#),@A4a<S5*:ZJcr"@`N%\.?U&j8nXMj0G!m`c^6kjK&%S.6K5(fq%_A=I/L2FqYam9B<
%b'OMSJ\bOpJII1Mc[[5?rZS./)C+\99?`Eh^8o4KZ.3c&p\$2)>eS0,lu>WnRA@q\1a2sB,s[4.)\C*MaZAo2%]P&'N]*@.plVG.
%]!Tq+6c\otl$e1L^O&U?aNdkY-G/5=3ZNr@SfdSi!HL$Q"!@4Z]K#Ve;:g^'*6*neVJU(R]*9]/!GRAS,>sJl!UoMc"FMBK<OkTC
%#ga<0W=ddO';Y!!#gHKOi"2erQ<CIL!fGfnXZY_1P96Y()l=Z,6NnrbDJVoXEBGg%#f88dfc"(kb^`!d#AFck&aG:V?dFUdhusb:
%="^OIJ.SI\aHGqN5f@0A1M::b-Q95&fO,5+/YTO'HAo$\re08j\/-+NA1qXjLhK1,"@l-5*nMR_B936S'L,%K9Mj3em=N.C\/d`l
%4L`Xn`G_)*_LXg+hV3&$@Hp*!g^R:#0pFt9ctR/!80=<%AG]\lR5Ql-#TEsZa($sa-MY=%aYcf[W[h3@3U'08$2Z90.k''_+nIV\
%Lrtk)=@93@]d3h.Lnb&C[)oa$JWtdC2Y?ZJh9$obN.p&2Gitn<*Pg.Ed$@(q!"'^6UGcW0(M=l'2'B_%7"M_(6aFBS:a28>.%.1<
%bD[2"G.%Y7!5pfRa?_@A-aY6"CN#-([QG,%cdf1jn,$E``/V7i5,Rsnn$`Z1m?qL=fJ3R_lABERSuJX)E>1YP.p1$6EWtB(1"UDK
%Ojb>9b9H?4YX8YJ8K8^I:UKSQ`f6\#Y;AIXGECY<-DOa0U^:91OYNO?NQEL_4U*^YG'-/>8XR]LkKSeh\72:rqU]")7g1Y:$S`&o
%F3`5)7[pDdfQ#!hi@(*'$p4R$d"`$M70IU8j/_s3SnI8[QB.6d9b#YH2[P4iZc^(@[;Sb*9BcEQ*?oN-*1SaG>=luc'JJ%5S^:j[
%c9MAi`1KiV>\6',m=?]P4IVVsZPn?9Uu8?,Uo+Z#mf\YBKI&YlL"S&dBt,:GiZVp[*5Dlh8(uscg&1aa&%2F/@+Ii6"(Gc+MaPfc
%6n"-;&>hl=HA0RX54KqfO<Yd<@egf.Z?VBLKt>q:q1K''1u`G6'%`Pt2O0spD/_bF?\:<I$R-M[5")8aJ5@kj#/XM^q1Ogq+bd]A
%6E9n/`0YlgPG,C`'Ftk]J!%#^!6*%e2UI\U*47$#QkL[rHFDqF*@dY%,V47jr'5ZQCqqoZj[.VQ%b*#W,`$\#6_XW_PQel/?u(q%
%DBeMb<(6$@]09+k(rW_f"3*e1gQe(a"!N^IGEF2(&gYPt-0t@#aO8=,5XXV)l)$!<,lqb*CnARAb70PGU-WUd\8[9a]`o&0b!tJ8
%Y2dQm217LE6C^MM;'5*4m\L"i8W*p2GQ<gB&HR-S01\To[kh"9-(e('/Dpdr_QAA:iot+VX1=anTHrq-*trY59nAH>kR(:ZDC"J6
%liXK"DDB(NCb8;7Vqi:&CXU`9Y`N+?+\[oiFJs;DSA0Jb,lc?V]a-&MUpbqd/ln:;HCt8KXMP"D&-r?YOj"Gg9F744.E)g.g#70B
%N_]t[,D?C?-r+J"o/[El6;im:-\,Ho,8LEF/1H%<(W/eQ"L=!"GSuDKiGbfJDFH&3iMhp"DAeJ[\1p^kAar?T^dt@goPim.d<e'l
%'8SD<N>WV@@MIgA^)rO=jq0o`SpR&(k6RN0B0PQhT+s4t+p6%6^D5]T/0/cj_)r]_i"K<T30ihYn2LeI"h`716=I2tLE8u"Qp"9!
%EBK0$NXnjE0tTCm[KL-X4"n\FK-`N@I#@;`0ZnP2ZL\,-d(;i^0_N#`h7+i7=\jPPlSUV]UgR%K9>X8l(U#X9A_`RCY+q[;<`B')
%/5IKldc:Kl\@fIW,<:MP&d^KXfVAX`+gDMiBstpf%A.!p/qY.)h&W#+fUaHrBemE#GGG6"@?AarNXq!+9I7PBFr<h`+>IK^$M`\A
%O`c'uTe=BO_u?%g(YP!?.fT73=Eie^P@V%&pa51o"UL!J0\L9>n>6r`-G_/U"[iPC((5:nW*c$;/TrLUGB9EcOElZ\RcB^P/+sT8
%]b.5s6(FtYcbm1&????[_0Yt2S'r)?NS74:fR1(<[tUki^(d&d-.1t?[&](/li@6FoB#`]$\YpU'("ekL0-mKOZC>hkK/g%*1RR]
%.[Z8-R1L15F*Yc,&sRl+'ooUT?/?dIQK?T"MEjnjl2f=Z5e;Vda%ML[(9_#2_6,s)YRp;6APJd%:tm[a?%Z.gKt%<s;,!c%Yrt>p
%-<<EKH?u5/:tL6!R5emiC]UdobcNuk6*LoNdi#HgV\^kDkC"5b\(Pr6^h*fV!2S9.nV3PdE_#2f.c$+aYKsaXQ6\[,%OTJY^d-B0
%Gn@7c!]Q&hC^jGZ8jRluYO?`tPLren%HDgf:(I?G%@g0/QXQ:&,',g\3uaXR(V''TCb@VD#o%<*E;d"@<s2,h[X+SH3P(W6L]mbk
%3sE^EeCg)qZklB9O4Jl[SPrmNL&lG$kq\(>7"@sk!MV6ASU=%JHP-\m&?:Y^Ne^/.!5!e@Fb!$>37iquX?cO!et8."90'h=WSt[W
%f(kXBHte=u;]n*ZNZ2Y:&<I(6jqJEIN`;dLefn,7ePu%&Znj8V4\)Jm,Y`U3oZt'>)O7Xe&I*p=`[`$3LWmsZMVLIW>sm:c?jo[Q
%^u6>ci!NVX"lo/V*CDj_(Ma:h/IZZ6YmErUM[77JEP0p<B@LB.5pPs\f\8^/]j^58@DOb@ZZZ,W"W9+=6Wh]+3At^!<e_S4(?a/Q
%<r`cS;0KT*)&=0AeBb@IP>h0,0*\rf1:\[IXH?EM1?6)0[hUnhXpcK,]/C/)OhkPfN/3[ID+'%>ST*DY&gh2Ke.gP[Afo8Nn>>An
%$-CY&+OfuD"KiC'S3V"M>2F4ei%$r+9NFj0d(-HBBA.>8\:XkhL0C[IE4*NBL[[$*"pH`.XhaA[HQ[[T(6Sh\T&GDr6Tg%:!-&Gk
%(T42=cQNq08.j,M4`#m;d_^E@PW\=WZFN2DHA+M;]b?<fQZ`3c5SaVmU!22'-0k$?A]%46AUB2Fl>ia.Xu0=iZo\NhWO'9cf)(=u
%-d7Hd7@;0WAY$!^LIcU[`@:bT[j#^9R-i)%[H1!&C4)E9Z9N7N!X`f4o7CRJ9dB^1(^*@RMHr.[^6U"!-D&/CZ"e(f^7RGgDHM5.
%ok[]Mi*\+hr(u7H4g>^[gUOMF@?B:j6mW5anhei`,cE9V)=8G*<_$-]j9ZX,qH"N\jT4aO5$OalLL=sa]j"#I2gXjk>0ELk<obGB
%['tT2b(D>.-o&U=aE&YfO?t35-luFiHdt\JYW:e*%8gZ?_birNAeP7jM";h2_egGnHWC>K^53kj`,q:2VPYl0WIle<@9_>PFIfjG
%#C`lf_hM,!M7U24MGNFJ.)FL&_g9%-g=HO'H$aU,kBH)Ap2@FTCe?dn(K`GLIjC#:j6C%4kEp]'$4so0p]GF5&:GR*+EIG'_$L6K
%(66quIgsIMWH!^^XuSNOMou6RfJo"*#*P]i?-c?dk:S`j7`Yu\7q0sNK%n0cg>4qD%lh/Z^,R_(e-J<JiWE^aXrdF#[&*hD/3YjW
%0!;p*#2DoG.ks<lIKDojFq.<G?R"u+N`j"l&A!V1n,oW.a"2ae8BZ!tIl'"T&CC]Iab>PMlpsX92B[kR!#G@bbdI@tZ<uNccXt?;
%H4mJLBMlu!5]p`bJ<*(`KL$rg"(DVt%A`#ei_l<6`2(aa-:*&,[gc!T'M&d2dq?kVi9V:ZH?*%a$oM=f"**'-#eLWJ.4:-Y.F33I
%)VU3n,tAV-dN#]!"TtTG\ee0`\CI2*D1DN"JOB_jLOk-Mal_Xd#7"S?C$9YVd`Y$0*0FCjET(5Vl#9>QiF&qODW=#nP.Ja([X=W8
%ARY8C,\X@$JQe,BL<*tW-h<_q&?.L#:#MUtKW9G1*:V86K'F?N1Zc!2G8%:Yi/HnOFM=U=_R&nq9T3IdH4EZs`O.=N(C'FHi9n0q
%oi7Xe;[3&Q4:Ef[hdrG6kIfl?CU:tk8BAn?rW4,HlW/go'+iSfgs@qr'uZG$aVoB.dZg^IY)1VCfB,1r-1P]`cd,P.8[cSN^i:K`
%:uTo)XatjFF1GCn(1.V0OSC2[$cI&[c4#DfAePo-`]0'7*Y&ad@CSl*OC0LMh4Uf$14MQt3ml@N,9$Ru$m-:@Mi%TI8Daa7a:V6Q
%mSCeuJ93+>5Y.FLa>DrP^B&JE'8a(A5>i,sq0jD69P[0lMi!o1%+9o=87&#lk\Ic"$A0:g[Tr;'e.1+>_jS9_1(MK^2[FpFF`@la
%*Hb^.L/Ui$dICPaMXi_`8#?o\&YK<>NZmaN!^n[C"rXktXTDQ>*'_eh@QGWr$]o##o@,fkf&(o@i?3-Z%eLWmA][pQ#BsF$M.:9K
%5`T:<F+jTql2X_p,]Q9ckj9*M:GuLK;HNt/o,LPEblJFeH!"#7[j8PE^3hS":;/8N(iaq>oLcQ2c9cXbQ&W]%Sg9:]=]qm]d_YG\
%%8'FCpI$tHN\(DWf@)ZM/U`g%:uqpcfC5*CK8Z"MHXg0LS-WM:iDG/?`PX0(!qL;9I"rYeP/;cSCG;F_dc!(mJE(Y*fD"9\4E1OQ
%ERdQ##P%:HSr2J\HV!C*i]om2]5go65.2%OG+^[V=>1)/OAK'M6GZ",FpjbpnJubsf)Wjlep1*,9O')k]qng0JW]0V((#?4jH;L4
%1^$BlJJ`<6P'(QHD=&g?NgeiPN']?X?/Af\NeelAE$j\e#8[kL30O>(S<OUNgrs@X#F<');J]FU;K-T;>S;=D\48Yo,u%2*A$at<
%S91Uq!1s?1L`,-%2umn[I6,/pCOl3.]8;=m#gI/B<W[:n8_S:=?Y%1X8JXiD_t3Z5LnaqcP$N?S5n5[id(&K._19'e`58prRY_Fa
%e*mS0,D1p)-op<]<iLhPB3C)6eX/o'1n6r[CU-H8D=)`,NSddC`g#Mo)\oO7PL8;<](FUV\\[l!<D9i:NCm<e=m_XsN:UfgCi2#-
%Qr;!>Z`Ycde5sTNVJN\YNjeJYA!t*cdJ+I1rK7kR5q*c-2fM:t\"&sB(NFgX,l%U\0SUQ?iW^)>MTg0t)q3q@^*['[%]qe&pCGFc
%LI\R>*TW8rVo6F="W*N.!kJ"u.c$CpU4@Q@=Fl4^c2l"OP:pH/,P;Lp"]V_*:\-_;I`QKDEM+a@:Wa<ra$YrYYH"8`K<iSTnW5qN
%ZDto-'r4ZQ3#tj9SG(lA800\BEc>[a))[Fb>rG@.WsE+9"rrA<EHt_cVN@j8>]@29*]rEg6m-+UaME-VjEX!#4!e\lf08po\Apmc
%8b5YqR&^_di#>J5fto)ZJMNJJ@40r#^,.p>9(#n+;8I9\h81-F1L63J+:b(j#c#ZPY$\^t-^8oY6@e0q\9XB\in^"o5Tik.B*j59
%<-AN*"H(ZbHj:a0]-%@17aa9$L?uC!5Bn.je(A%Ug;4:/`U84@9XRTC-.@H))dkn8ip7-o!Am-6bUK=on<"mBOpUf3:]!-#Jp\gS
%,oHu25JTjoX0$PI%qPa'gF[((aOha-%)>5Alg%6eQGgPR6nhrdH+5cSfHp.gH(DA<qi:+HgnjTc!shbnLp_hD%U!g1-P5<q&g8+M
%,-6e;i3$.sLD>A,3e]K\$tM8[<?L,)5]m,Fq**[`dM\@b03;t<=S?ba2W-qP-flSE_&'FsP(WD-DBmr(2K0h3]Ac;Od`$qB-lsJ=
%^79ZWHlU.Amh4EY%D(RHP\[>9G2+ak"+Jq-2j$_0ik/@MPXJ^1q3C:k3/hhQ4>SU/J=o$[,`ZWunqJUP(`+QFNfD4QSgKCD&J\h-
%Ee,(AQ3IlK6l%7E8MF:a-+].uO;n\P(ROVO0#UqRYb_.]\U_XX!0D>WUMZO:&-c=kgQii5R!bXQ3m;XjaF"<2K2S9M;OPfp$Kh8T
%d_XUhn*ok;a_-_UgJp3s[b1Q!5ogRAPf3r>I,or7Uqt,&:4.*TI:d"*-mC@c<Yi4Y!+PagE=<LO9T(hucAO.S9%mX=OJ%?pfj-A,
%6&/0h8)4!>[/2G19dj^'eMH,X,#APS&g"KXX+(:L9Zja7l&K:M)k;,UOClPbO5LEbLrLnI,NVH:M2;L2.S^-Q[%uHjUu!P*EoG.B
%Hqb6OnMk=T39RnTX;qBh2r[bYUhl10O9p;Pa-t1aHNd5u"$dVs>2]!5W;C%EdYEBmQV&]I?N[:\JW#GHS<53N2]]k6;?-]U-BH^)
%q_I[lV8uqDER?sC4EKWRetbqm=]!D1OEBDYqT%TW.*UXj+s^LA<e](Y4k]Bp*Ep+n@_DrZJJF!i%U(uh%Qai'ObQ6C;p\l_[KG@P
%Ku,&+jW[FF'/#(652kD!50J/:P'Q\u+c#'#P9RAt,.*OX[,YMHp:U"rlURTT(BYDm>]G2LQ`@Db_4k"N2MAp3:+77hLG%g`3t0dj
%NijbKeiJ)]StoG\R"hN4%P1<8@Rh,2';c[jH&%,Fm,mR9-s;FJ(n8t0Q%C&0fBK[%d1'07TYZ?TI=Y^lrd[=I#&WhS5J!FCd%7e1
%3Hu.<MEjnZel=F5j?`jb2`da2#$H$VEqp1RMC_m+e6S2Z9t]HVB&&oOi=q/]8.csTPs!,^\:jLbRur0@7/dE8:U90g/B=9g`<l3R
%07.`MQ,M4*a)C4R3gMG%%#c[feV&&Vr.j[@jQmL<X\dqF3Lj0<P0.Wm<39^=HB+l'JLg^D\XX8NP,gS1U6%jdk7_)Z"47*[o>Q0e
%pph.[:W55fOFYh#K);U1g`q$Q:h'o2,abaC'QCq6?6r*c$L*b;HD!6nj7?eT.J:P.57en<"UsIr%2kZq0o!Gn.r%92RA4",'%/F2
%F?hS+O^!JTd"b0MVOu$<8]m6C_28UR8J3AE2A3X_<TE?q5]S?ImViZ5MkZ@^j,-Ka*&u'>`sHS?LeEI@8TB3o_PrhF^YDZ^:4_`N
%3GX*1^7/L`KMT^L;(frT6bE=3>U4:qH%l@q_E81d9!P(.EuM$fK,=(Wo<-uCF9agk`,XfN8NBt`EUea(lqpe7+B$s!,aEGC*#'s`
%lUJC6$Y$u;pCJ9E>X-W#+L$QAA8onW)U,IAa6jaaIb;V,FU^b&TKdh<Tn*XL+E3#l84)k!PB==m#*"1\_A:1W0q-9aJ`grsm"4`7
%GZ+C)?oBjFm!%M<.O;/WS@Cqd;'?mPU7o##I*b[oR5"\Fc@E3B@u+ZaBSsWO<[\sn?C;?6M>nfU#d1:dkU))5Q.<uS"4V;b8/QXH
%Loo#lFfBY^Y`fDar4o[![&$Sa8ikr]Nu'17)lS>+ZfV-NMG9:J.8EUu,@b8nUAS4]0_H];WB@_0_B:J(_)N:Gb90l+[N[U@7k1_6
%'5a/AO%M)a2ma#aSL7Z,KmPQ`Q&4iCNK<*jiEDtQaD)Nk9G1<'B!3_GJ/5;02/tAp1urBeNW=LWaT9KAe7sob,:QPVN_kLH)>J2Y
%TBck07@3HXJ[1:f'63*i&f-!H?P<F^b0<tk>piYs[-V5a`m$'rfR5`La7YK>o<X%QjSK'r8WmZ>_MkO-`D?b1PQ`0DGu7h==/r0=
%EfVjh=eP6K!,>,749/C>le["F*?\"4K@t(;3"3)u2GS']Cr_.qlgXG'NG5q4SGQb'63\GIp0O9C9+^!H.NH7Lo[n,u""g-$`$D5$
%V?eeZEQAQrk\Y`J_*`5nRnf!@$P>W`cXmk=G9A[Q@1U=WG\sLB<#96E]2Q!LW[q<n/]1j7hid@KTg6&]2%U=)?IS'*<A5;$91BhO
%[([7F!n<HV+[l*q\=q/[2R)B6SJ+,9a%9&0Z>o$F$s+=gZN6%kWG)U1.m\G#bb:gV_Ki_)*#a,)dH)Z?G$Wf':tnj9Hj90A!7GG6
%5^0$\?iZbsaZ%HQ8*87!!FW5YVkpS$cH8FJ:;D%8@<bO3XnkWcgR/8@;fT2IR(u8eWG(gflGjgabCI'(J>e)JhPdTh"PQFu#&MV:
%*GCqr[+MVUV=k/GNe,BmIV`9-8NDrg$5(gQLIT;F6hF=u,F^K;!O@,XK8AN94K=\^erqkfjXOPKMt<+aEfafk`JH]s:YuJ#GqU,1
%:t>]=Y%59P$mLGl_I]=e1M5Wd%[thFn]HJY_WE:*%%C<Cb["T-0TGPGTl1L\78]>RA.[WZ8+^lHq<e*HMF1W&acR6sMDf/XWR%T<
%&ut-I"$jX,+Q)`Ia>0T*+l"@i15hkZL=U:Qd,p-oLjD6#]2b`I%tpR8WnZlSaVW]>o+'j6&l;)!MS_=J@$0HAa,mlI>j"O188\EJ
%?VAge'd&a!ke[2`L-%4A$L%nKplTsA"X%W?JER>;W$&145!2SXH3%LqN[dUBlR13dRf7K=JPqA>ic$1I;78B\D"U-:Gg2&6l(HN2
%/.\5NRcrF-^/QmcI"+Lg@8P!fV4geU9Fg\5&)_.O.9LO_j.;E<JUE0&i\fobE`!nG>:;$r-SEj`+=@jGgYe8e50T7LM1@')7_i=j
%knS(ahk&ca`7Ugo9a]JAj(p_kdDG'=IP1+!]#*W4R[&7nS;#I9X?K6^+DDIkrOVM/!L'_h^4aOIA`:HVAEJ-H@tRS`a<=0qj#h`M
%_1_2'Q*=,M$$U1<e&"OZ^*pj*>+rGKYGJ:hkTVD^hc1EdqJM:L"c>:*-ZslX?jGQsNj;o8huleR`QHUe/6saC`5[XqO5id9(uF))
%dln,@)7laVCJsftfm_E'#6?:e_nks*2CA!F_,ZOL2t4$u<kW/HO7-mu;YdP5=Q*JErn7TgaE7g?n5@TZB+ILs^@L=Vq#IS%NWU]M
%dTP/2/r[JJY0q?*Y/.9ALZ4?a&SRj-^_[5I+]>Ji(hd4&a3$X8<rVs+\RA.13=#49`+)24?AV7o:k7PrQ`I.p8Db7_qHF>Jg?Nau
%rh<Jmp:I;to$','99"j:Cu*`a-'UfPjG#sdU#Pp>Ao,(^EG8J/IL5'B"er1u^/@R%3"h9PnMe+#+UN[@-9A:L#G0de;(>6j:=NP,
%W"04NRJMicBJYjm3Kg\.)o&6a0a,<PQ'mPG>,DuG#LjK^iaRC84qLQ:13B1NN)Csq9h4K*@YY78g1_IFK[I$2dW8oj=.j@>_Y<]i
%5-A-uhf%CT4=dSJNA@hkgmV`6_@([`lqmngY",NhXd;>VdKM3s<;Xanj6#'U^.RcR;T"?bE[B,q\cNMLF/:oODR6)JJ@KZh-Uo(_
%pUCDE1Cr"mjDcZP:ki-Tm!PeBp4b)/1BI#>=8-cP/KOUI2Rs<LBVYqR'-PcTjT$lc@KCN:\6=^*[6F!$"]F7.`m(\Pqf57#M/+%$
%G6,\0+=<,.'F00J!kGbhO_++,G8W*.<QE//HT"5s?[IQoH&a-4=SG=00F*_U;ho`?ll$T>8i><4PX-q"Q3*k0%H8<n!g53H!*$%E
%L*?igi'&`"PN'(bMMj10F`]Bp%gSR#_Pcmf,SH"1bU&YZIBShB2?7:WpW`bLgN%d6U!O`ck2W"rh*BbJEhs$Y/t1OP62]7t$rXMJ
%g#=B"gr7'//D&o:P\987-Sb*"+opjg&I.eHjXQ8,<=;Aj`U-,o_fe]u-5@_C[`s(M;Hjmg#+ed/B;fBW9%g/J!TM4&:\575T0[tX
%U2e#V:6?5p_D]bk^=.cj_"B`"9->\i@Yc1C$_]NY$3ggMaYLnZ8gb*[g:er>9Ns7^q0Y_9$rWsUIdr[>Eo2SEFqD\*3?W-*3>sr/
%-ms[q<SA.CM)p05(N=J<'A:sF($k`^C<Q^9MPSn:[)bhh4+YJ3\TXgO@N.un<HHtXT!W:ulW1]`lDJ:C!])bk#nRX<Fm41ccrC[V
%3,pYa;qBeHFs3LPDq#!>h[pDZWY;hGFRT:-!OcQij9n9p<sN%KAEtn#i+fE7?i<DeNmn[(OH1+0s8Ui#],j%s1HY?fJH&!m$nsR^
%9h&Z@Nj$HU%1c4Ma(INMZ*"RMMNEKYFq7bS)u]5rcWY8RS\(mm(<L;`)QS"SY18q%,9nDmj,N`7`Ni_l3S\BC),Mo-Y'[dWl75Kk
%D0Pb#>[*KARH!Q^f):;3Wd,1>ZT!mQ/0eEL8YSjI'a`;Lft!,Cnur-tZqbe!/_ZNk]#,i3Q8sPe^L(,k.f+f*L+<;=\]l*ZS(5LD
%E3)>Q@5He!a.m6.8#DbLUr&=*G3_YK%Yr@Yrp3rglt&33A6<[)+7*DDe5MIa3#phne0-h->)A'UFa7`D_I/b+kUk?!!alNGF8n8*
%j0.QK&#@p\q.&uL.UsUkguPfQ2eNF*HJ#Hc.jmrtPo?\#:o7u</Imq*PH!8l0P:[C(OA,?m\l3gPr:AF=b:U]ncp@s?%Pua)ZfR,
%#8O0^6s2\rJMME9;"!CBFUV^4oaRbP8S+ge5'285jZZ:Hs(YRk47%"X[$nF.<!^MfO+AqMEB=;]j&;q[\)VHPBX0qX'NF"\@ZoFt
%F[dr"]$^f3*O^Ap=WQiSX4%H5JEe]L(V?R4@lQmMV:o]!cd8cbp*U4BalD#<&W7O#lC;(s]ea.-FX`ThERF'(l^`l;._(3!%D3BP
%\B2!P)"lP;2\*M]eZOpb*_VA2%4__GalE*GV9;;=DNmf$kbQ^[I)c]:a;iVh*"YBuDa\Jc>`QlYaVg=!<;ne%%,J5d1dXf)"Bn@>
%aZcY2c-ga[g+h(A+k"imLl5h.@pc,+foN^\3&QOE%LLG'Y'*'M>."+'-gU2qc0Pk8r,Ud\?V[/[gLVQl2GUl`1XQ!Q9)YBj"]e6;
%N&&GnLu\Qck,l8O$'4kN6H5aQpoB?dkm#fD(^;B<nQ/s#)5^\l9;:=ddT]Rm@NnqG`fm`G_2>QYm[l!'V[,t'?/mS1:jMt:mgWHH
%ZKW<#GOQ=5G/mHV5"617@%H'&JeQ)T%KjX(WFNDn?3":%(eL0+;A5e@j!oQO=]PGKY2(c"j((I:VNCs^`_\IGg=,%l7I"qa=!]BP
%7VaFOR7<@8'j6/QYC4(g0B[Mob&><c`?5qY\@ssA:V/<_BEPBU>/!qED0^8.gGfZ[.pFiN_9sB1Ql:-k"cb]TOc2i=E&m&/ndoB,
%hSW`rd_?@/YF"d:c,:R_oc,b[fQ^561(ea0R7J)3_\>IDN]+"BPU:6mNPfco4^S),?%.YKp2bA90DOg'Cq;1^B7+hM6'T'T5dZ*n
%7E"'(&t*OgY>,!Hej!s]>'(kY7uqRVOkq#*6YEA-P..r;B0Ri5P[m%FQ>cD*-Kc/uFDstK^4h9jd:I"FX_`!63)?_7$7:8si[?kE
%8b85cTHZSjo^GUA>E8uo><>X(9Wr3,lD'H*2E]%KCAlX(<6^%6I-I;rUh]&GG%D=iG^Fdn/.bONm;bN[Q5OgWTdF>(eu73_?(pQC
%(a?K9T*V=0Um`GI108m(N/q<0F/WLS\c4E^62(FnZ2l5GAg9YTMH:q@i[!DQZan#6NGL8E/2AY456B"d.B03F#eT"Wi0.\HZ\j/4
%,Y,TBQ=I8!1Z*G8'/MAkL,^+K\S`HgiCc*B"%*3O=lM>d,dD0T5,;:/OI)#]J%Cti4a^)ecoA]CP\apX0__^E_P"KGg-0\;+B;Sc
%+QACEetX7lj6XlW<%KgmU^$4p.3O"K&U6t*iIfifJ0\u,$^`e1'*]Ru?o5klMapXGjr1_;\Tef-/0:JEo+!/\-VVYjX$I>#qJ2b!
%Qm>UDoj)@4kqO):23+#d2#0asJkPY`5A1q$YVD.L)Pb"1^K13+ep6cqJ6oB(j&dtDB"FVuXYl_9l"+cZA>^A=`^!R]Ph*=MfFu]H
%(FIGcfMTii;W='Tj6Td-?*o0[=\#-S=-u$n0A_&Wg1+UHVP(4VOP[XOf=f59W`gd^3A(WFgIg9iJ_`QBXMeBtJPXWV(2ZOH(b&a;
%*euIdK;:'4=tEWg!R"_TJK3QtC7\)fS:_a93Z#.k\?mRI>?%S<L8`PNd7tGVTRgF^&"ku7((FbK:T'kZWP21pVEb/jB[(".HIE,K
%I.@DdN9+j9,1I$3nRk;4YVuXkSPeS^2.([Gd?$(q<nM.jgt"WKKmHb>&A9\s6]sKWj'Bh>gJ[3)a$T5i:g6F^rka_C9q`6D^."0,
%i+.p0'4=e+K-WUp_Icpsc<tgNej-RD1H;$O9#0HOW/BY;fEib3O-Q*qC*$mX]G>Q(ZN+tP\p(YIT;qiUqn.:m@&^NR1#qg"m-Xr/
%&+:m1%jOiI8iXrpfni6\#k/a>H*Mg74sNL)Ap`PdOkFQX)8dKsr:ZAoJrp<U5F=%DMgBP!Fc@q0:?*2I<ABTN4S#9AgUMHJdMY8N
%LFlm.LltK)kUehH"O$+"2Y[:qRj/S-N%Rghf>bO>!+XG9Y*YH@!um#VW^!OJ?>Jh'Q+m1_4`EuQ/:fQ-rQW")_nn6,TXnp+.b-."
%5fH=]lnLC[/@.Ll_cmU:fKPj$HgECX%Za/kcmH;pBUjj%>rDGcja0rHs&ua>.Oi['B,a^:c"g^QWnBJ=`Q-sEdtJ[_>F`$<Np#hi
%L0c\?:H?u4F.I(73."9gTO+Xqm:B#dah)([GijVO?>aND;76BChqNhr\oYO_hB,7VQDZq'4L_'4X'(Mp1%\nR!L6f1&'1DiCi&'P
%n$.,+e);kQ$@@/;qc"MC?^kQ0.^:jsPB%/%><-<$%r<gpDlgc:&/F/pQEf9<Y[)S$!]g.b?#D:gg3MktH.S;'W!=:#S\N#b;;PgI
%bGE=I5-1>o&Vp8;0K-L/)Tr_L`T72e-*.:bJPj]V9Mga\Q^2RGSA:G!LIhn9F6nH[4=N\@VSMhQ[rt0siu!`bHl^d!J+VB3)4LO3
%:VfOSLd!qc"_@hA5paRL9!gUkL=1#LKj@_m5ofhr]mh,)%9Li0AP:+aEp<s6,:N6!Mg7MQ5,R^g(&uk-46r1H@O<#FZ>Z)Q&OGP2
%%bJhWZr<X"A0NXp3/;bAP6H=4U^dWc7IO!I6$,XWpXt-qHm,gK!TV,].T8r8-D]_jp'KY'LUiG9'u]6oP]P\B]<XQ$IY>7t1.mr>
%NbK,;c><romA&%.*B"V;Y2^Lh_t8.K29@5Xdb'Qds%dUViO7jhLJ\5KiE3BDV*S?_/Z60"3tfD5CKn"J67uXs`6oiU%$[NHe.@`T
%:#'rMQQ]W`TAq_.fud=Ea(-[6Q3^\(mIHCko"o]C#a]c&.>T_Pck2\Pa2WW>,pE^1YEhS^,0KEeL*5.aKc(n^@1/962'kR#>`T#/
%oA2QgI@oIgfsB_SE_ku4_2>fbERW/n9jCc*6`FdeZSKdY:^P6!Bqas"O:AYVQ(NWVM-_%m5n?NcBs51`:D+.;Mg0dr@GnDZPPj\k
%V,5^n\Lem[qTI4.,`ch9G\OURR%)o:/te9.7TekKXW#PJ%dQ.iKC-RZ2m["L1jZ(&421"lK]B:>:pI=p#`a3^>&u,/+l><2ZF,u9
%10hj&[<pM-Qh#?/Z`(R6WF\F?Vn@2CDDhr(FB*0P_pD/a3nZ`a@m')3[:=n*4a!thSKB\37%d8PKi!O#K=ZA*V`u\CBSo\;&RY6A
%UUUW02JL#_g36cA8VC,6;@U[GUN>1.[!62^W6d$]o9\#A@W'3D&NMY8$c&@:pkh6R3T"3[6=cK'Z[ucri'&RCT;rg[d5dLa,)i3-
%hnd8=4@"u^EY+cj)qsXg-CRtO#IfVFA#94$\i(>SV\SDq+9Sg,Kq/nCE'AfXg$=TtdPbPdhj1r=<#S0,=n$#2*5]7S3e?]5Wu)bM
%7;ld(+;+h\jM"-&LAl+F!:g_inX1T6]G2HD:Fe#O(@RTP*I-Uk6R>uB[+TS1'eSHN>ITmoniO]$l*_-<G-%(g)i^VrKqca+H<!5k
%bQ*VF\mo9>,#S^pBFD)f9j9-1RR8g*%;hj5Q!uH,(cQ>Tm]#CeGT<uER:555SE%[jfaQReSbTJlUttIl8BLPh!,7SSQQX-NMOC>$
%d`^Bklin3)(fabm`0Y:n[\iW\dA_"H>W]E,_mh-;YpaP,<+nlb1Du>Oq39lL>&W]9'?!Xi-hC)n-e;jU,4!V9fj%Hk=H(hq",0lZ
%M@c[,n4o)7hcm%/aP<,Ko^]+OWu-!0:[Lmf:m-0(7@%30FZF^jl$ZNt.,!_"OaAG``.AUBaL:QBLJW@r)bMV`8i#7pJooquQ;V/;
%VA/N^UqSM*Mk[2>ih_/D,'ZA8r']"h>!8fopGb'jiTh]N[EJ?s:moK.BXB@G']^l9o[eMLKblWp,FCM9A:j/?mQ^CD8"[o0VPGm%
%ls-G'-:=E2*95GjiekhXi@"d79BN<j)/#R<c@gOJq\>J[8o`C_V$poDiinm'@[!J^*o:o>7UnFND2_D(4LJmD>&)WP,uh4;i:DgZ
%7W&F@>!gA05+)$_1@:Eic(eA:L/V66GY.qa\ArhTX\Z0Zf_aN5l$6OM,\Ee#+5k<QNYC-8df_tZUKa%-;%V[\Ns0FT_VcO]n\Y8V
%8YElMJdNjER1br=g(8ci.KL89J_8ij]O1jkO:"tY\D1;#gPs?I#Y<nUffWg^`9.>Vp0#uM'P;XW;H\55&i7(&j;<B?(K](po>M":
%RRC1+JE.N&X>UjH:AosB90<l6Z-HaVW0H]4/%s))=,h5Ea"t`dpY0GtD4P<eD3*FR9/m([OSI_.Ocu)eB2fUV;apC/];"Rg%h'P2
%`#8!D==J!,TD3;!*=al<U`<SX[CeedE8J^P1F#'+=`?YG@(`(XgrMD8W1M;fJ1[[4m\0OKQJsA+q74fkqb9g1AgNQ5UhmN9F(OqD
%;Vo:,le!j;/LQa1\QFRi5sRf=9YTY`"'FFg%"/-oETr.-+(?Rh191b+[mD!E%/-1GdoeF>_MpG$0q4G17jj#G;`O9GDKBi@:Pi>V
%"nF^Lj!ZEJ,O?D^8lN.*rh/p*2"NLPlAp9c+Z%#2T1TVN@>G1o=Xp%1Fmc/U$rFfBd8CLs"2J:F,eiI`Hje;2_r9o>Dq="iVI/*F
%aXej,f[WV+@LF8UR*AN6n:rRDguMfmNXfO]e7,C-nT!;ud\2^^NRWPl]*gV*hiRo.ALs%m-J@D*U_;\>im,\jU.j6(U;.Xl*9GY8
%"gnt=XXP6*3AB(][HOE!Snmb6'qZo78s=9$%LoMu+J6qe>)lc+Ln:=(^%EH,XU#t5D=]EEVABhld+%(3%6H#33YbKL+c>KG(82CI
%+F0;f:a_+3`t6o@AiX_4dR0>V)(k?VaKId[=T560:7+*!r77.J12G*#$No&X!]W/>P&%`R*_e!O'U(;Q[uXJ(!&)b5g^<:-0<tMJ
%I*=")OI,J#dB]odJ)e;)ftVl)W%7I`eFbe6#t6oEA=TT.f!UN%)K)EkD$?o!%Y9>qeE4\)9Hd-]+1pj'ol9R"klbiTUPBMq#<D>-
%X6mHZ#oR"6mpus:q9tLp<)g,Cq.2P9DX7%o&RKe@KiCG5+OH[T.+KBih!G5"o$$3=]TJm7d>/D^`q,Q2/A-&:g5%9]*Vg)B/$GU<
%$&K\fOuRL#LtI?d$M(IWLZWq:E-Nud(;d3+$gqjT$F+B(3r\J3GU2Q<oXnF7:a%'F,5VI3]A5_J?:(uG:jUZpV2%rT+>NQ44-R6s
%#q93Gj\b]!["85O@['bn,-5i_l]a5HC-5pj&6qDf+C'[jrnAu%h,j\>0pnK(@q%U43-eX=5WImj"n!Hrj3oaUdDu777*D3hOP*eW
%OdNsU?IO7r?3sq7+<PH"WG#fceIn67abpq]4=nG_M;^^Xf3"'),TrmGF@nBt7r??4,a0ng7G>;cM3@1HoL:_I%i.HF2^D!b6X/$]
%iru#jSh<Z?K,"_pZfnu4o.'qLaeAhdVOX>.im[lr1>>5!jEQOLZK0Yg6W>>iVJ0n\5HLdg2>VB4;%^lh>b3P>DVr;[<p&m`VPDJo
%3Il>Mln0@iSRZff%O@"%Q&9S2/'tP6gjL"o=_[g+jE!N]7<mkF^WOg[>!HA`pXKpnUD3-OeU*D<-!)uro=DW!;el2EX;jdJQh(Z^
%5RVBV515Hs1o\a)QeMeEZrt&6:r6=HG,>dZ^7dQW"^dt,4>+dSG2UEZEV/g?+&(5jPa<_3@pf1`I9%7'(OBn*aX_*,1%tUhhb.l\
%r^hLbo7rUUcSMr(@,V!sM%=Q/Dh_\tAR3n4EKj_+@rBb*Ptu1o:4Ko%o]Q"gA&N'[GhX,oKFVng-g<(:h&16BVTc<O97tGV$Pf,$
%Eut9b?Vj_=UY>QFZ_;c2CEu+Yb5^=3h5r<3@%E=3)jHMka!.PsDJYDQba?jGD#$T[*kYOUd]d4NbjN$glAOmQTW)bdd(:MOq!Q6Z
%I<#BPG,=HB1DN),g#\,*MYt0u!#*EH-ql0FY5g.bX%!`uT#6"3<TgnMnL3-Inj/Lj2+d3\E`XadVa!?;PeX_#rL-.s#Ln+Aqn^J+
%BG=#R5#*$:]!s2e3_Z>>?WE']apMYQNHGNm7%`ZU4DHDY*)P9NdcY#Y2pI[)%u36lMM!UT)=8iccqs:\B(b2:U7E80]Q4>%8W>e@
%P.=ko#p"qdU+L<&3u:AOJ$B]t%*+:1ZG24://D_/H#,2X1WO6p``=IMQH;u@bed6h]mHugW/%O0JPNUD@"2Fb+&+1NCP5F=?e@u;
%\UIa&kX6!@]hodQ?W!K-e]@5NE/T8u.fgp7a&d0Fn>e.'Vg<8<db`.]j$SXC`r]1?cU\k'\q/pAEPpdhmcGR:'j\>tQS<AQF:.SM
%(.jo&fN7JSa/Ua;gU=]91.!faMKd+<p.g]D@Tg,9KuXNVOJKdI*PF",99X*Ur'DE=4KPRgQ28ojFC$n]HQ;X9*T]SrR,\9cB!&GP
%:m'D1TY=\EGX=d%M>P'++^"98ibPR[2-:.FV8/csl!@MsL#-9jcZ&7>%CV[68[BEF^m6Y$%qI?LBPhU(:jD&+;'fqkXDqBUUB49'
%:VBn.m8Zug]G)ei]D'sjJ$WOWG,`q:aXbtq9#:6<BQs0o[@SF>k_lp<8E/oFFRLf_eA_)e*EOZ\UJket&7U@G$=1N@_k.iVldhMW
%iCtNB^!S`9OM""YdI"=G:KHc'>4A>a[FE)K].(qOUf^M.kUk469/-Eb&G;D62B.C;a@Ds]W.1648f<gAnj7b"Wr**&]=[\Gb5,'p
%_+`&A\.5#P.WA&X"eE6-RX]F]X@K\piXNp^iBR\F3R_tT<e>B3o7R06s&3n1(_HpS2%hh<E#p+bhYY`pU:8q`l4fim-#T`pG7SfK
%.4TYFT8Kq?V+2qBB[;;$*^DH7o4'b_$Za=>SD.o^:s_0eTnMLWh?OtaG"e+%q=ZS<Vf!p.W+KLnV%,$r0!nud/,Qp!C;/3JUIot)
%G2n"^G?SNFG!!ZpL)ap#5Tr6:kbo=a2(tn3'VZ1lR3"DE[C1V:#)lQD<jV0=,#bB1ZM;CQTt?bhlGRherL9m?XU3Zm#pEBL\`lk&
%-E^pmBXdD6USf,B.%`RtW@K<[Mc72d]Wk:Y8l1W1S8H[4fkp;ghSKh"g+<(HFHf#qe;L2[iC1/=:D-rse/!%\."Q9$NdQqY[[R0I
%DWUA/]g$2'QiD6J:Q2(fC$iWq+Jshp(Wp>7,acth,bjF#<WfWJM8&A0Befh0952UK-&!c),k2WuLfS'\5a$F,Mp,'DGpK)9T_3M4
%5Bfe7<R;f`m)).+EGt'QP*rOMhn-2jd/;*SQ5FeSVPJ+SNnt[c)CG`5dZ<bO`!-g;q'1m/'is&2LX<jtd**fa0J[0^TUo4*Md.7r
%ek7$&Jdes2Hs>otRcie1h7iI($-[U/jb&;$ej=rY^(TEN*=7t3H%;:MDO+(^-]@.P:5p,pad3tO`0^U^OeQ4kinWB;PN<dp@/Hfe
%+C/O@'pkPEd_84ULg$oV9$*LK008\Td)`8g9Z['^/3uo"bWaXlYlLFM6^[r>3CWO5GaqM!hE;LHQ48Mo=O9P^<-+rI80Xe@R8:,!
%b[C$7Wc)cZ.#1S4]]E@7m=o\q5A6^V?S6PM/L-s+<hF'15O8mVnDTJHh5$WD,'G<49t=''F04NlFk;?%^<T`sb4'kYKVIcL&T26j
%]!nX$Z>6r>W&,TUF`*X^[e;'SFg;=B1KK>>i4jL9c`=_`jA>N3]Yn80H1*tDhJ/0p4DN)&gXLfiiXkf$MNe^ZdCBVK6<^>'#tpCC
%59U6rKF1qT(2<9YJC8SAOS9g^<GaYi_']1]AY/Qs@,a9+lt!O,"RP.bGO^H]Id`B9]nFkoPT<&I!0d$dZl4HJ9*uUGgYueQq".SY
%[O,n!Kh*m'@B.W"*GW*)eDePm,:>&55IKbqMMYGX>3#Fm7nc;Ps7*qlaQjHP.F-=LG%[HFPP7)V;YVNEECec)Q8p.5;V]hFh5GBS
%Ua#W!Eq]_/e!$p6M8ZfgFBIG@`eVR]I`!dgglf&1?]LDo<ZE?RfI,#Ya0_b&O$7_DoAqh$ef[/Bm8fpBEa!MQEAs:)ALXY<7h9r<
%9LVfJdE<gEQHdf()$uJQ:ECLQ_boJF*(-P(8t6n,/SVOo]>@6<:4/@gmQaDQ:#>@K\c0OTO,ErHC]>eEWrW?o$Yb\@';.rad'+;Z
%i0\4b&!In<RSN%`hdAjl+FAul!^WX).g4+b-DJ+#TIa]sAmjOB&SS6R[7m^$gB=hf_1Q5KXW1&>Y#`*K+d6,C9Q$L9/u^TqYpg>&
%)G/CMWH'u1gj4(Fjn0k?=^>-h*/bd82B=j%"i<%(.\'%=S1m4;f=Uc/9!M6Q5h<7E9&8LGD%ia'd%0\/.(FGJ\tmg=W\L8$(PSeZ
%c(ghE8^C4^o1be52U+$LBOB0uNX\%4NnNdQSH/Zd5ki]&.$,0="d,]0aSs5K;QN5b8K?MX(e/()h.g<eRdAhEUR=rq/uD3of+IcN
%'\a,E`0=P=MNia&<B-PN;Tpm..ktVF0CYCq#Y<`M!\>(gJ%9uA#s\A(((=$u\nUD/fhflPWfY"+AGm1@1.*\UhRVjmCVchhb\fZA
%HV:s<,#`lg]*FUK@]EFRD2o<8]]/Sokcl_a-aZ4Ch\XdX++ieG$Hnbe51%!p+Ot<bq*H*HMKq^,L_/g<"-qm,#Mj.D0]qaoD9q-(
%^lT.jTH7V+;5M_VHi/U(!YlHD]EP"-_BQ#N`U:2gn`XgS8THn`^Kb>L^\eY?UFdXK$rS/T\JUj4mimceUKZ>oM32P$0p-3m$@L1d
%.`Dq7jH#A7PL:(S1&RLjOA]t=<@*^Y!rt*'g7q5pRmWGg9(VSjFO#/mNh?>O*/JaUi69qJFGuI/C=(I7JuHLucrhDmh\OJ5X^%eH
%9bs%j7IR<DW;,U%YrOB\e&\+:@r:6g,`W,l3b0V9p:**<4].[JPM0K`qo!kEg^GaRdq*U!O.?pl\;[!$fhD1m?>R.6RUlW[DHl.Y
%^0StEgO'^jo-.6ZUFZ:g0'Yfl&L=,4K[S!/fNKO_2b!"lDeBS(H;]D&BhjefP1qL*dB6*eg&6_c4_im8C(phcA9U6-Z>VqWeG*t]
%Kq0*),uOE`I)t%Xh\Rd1jTGp1C,?fT#X4/I2(U`fA3[00/Y8D#0Pj?P;NO4qVG";r@;H%RMj;)<I]f@+$j8>"SH8lHP;CTp=R/;>
%dj(M+/K^W0ShSM`'VLD13#aut,Bh4_7Kn'[JhgANl#JgbIeTj1OSNJBm[<9un*PNAPY>01R8e&7C[8E0?TJPBq)gbO,AFgdYSXZ>
%aPh^Xd^LW8%qJnkQm3M%YE_^P:;4>!>%Bu,\eFcBMUa7l(`</W)CEoRZ^^PZ,[7D=5opHn7NhTY!,X!q0f(k);5sW.%4is%9f5hQ
%WpXA#Y&g;=CLi6i:S&tmPd#G8]m@d+\pK9RTNYP$V7_cmQ1U_-T@71TZEYn%0\g.k=i]VD@p4:qTfRGFYQn-`@l5-nH=aoKSX:^@
%PPosO_^RXe\B&\",-bhfMLao`Sn>am)ta+IB/rD(@+m,PU/u^nZMBS&8V*$Xk>VpdP/]la"-u@q=kc6B)00Bn.(9Jp97/tP=V[S6
%C8!&jUJ>CAc6p2<`jFO0MjOOg.reP1P\uU>R7VZ)$46ebroks;To7WS]OZ5bgum\KMLX,B07T?h_PRfX:OKd6F1e=!j?aS.G2PXr
%T@;cQ0k[_2[,6`#eUI%l5ibbn.:@qc'dj4J!c=&R?K%$]nX49bW&l9VFeP']F<UND"h#H&_c3>LWBa<!8sEHC9^4dol0FK6DUE7o
%-)?M/=.Ei==!#c9l''m+i^3Ht2PlcZ(iu6Yi?5mM:XX!hb^<,qXlIDlr,"-Hb2o=[jpuS1;e^TjXn@IOo-oj_Q`+tDo"?L_"Y'sc
%ZKRc\(ClbJPaN/ah]i,Y?ReZ/P2B4m:g=5<j[?UU-4-p\VXMW]bZ]d8r.P^OjCERMXNBrR1J'$+@gCg^K^MDOf,Apr,`AK%VY7So
%kQ__,:CSKd,>$;FA16,Ll/\T2o#0:39%/'O3km.:ri,S[9.Yp>]EnI@]_G<5IW)U32p,6#6So\2s#n<JF58J4^99ZuIVd2eU2R=?
%<jM:U=M_EaTuiO9N-MG8:f*%Fnd1e4&gnboG&)%hr$sCiD!.!dWjPCQKZE,sHu)#:Brao<hWe&!lp"-Y^!t?j9>AhDXn_mJXbc7<
%Zbcb-7AqO%AbZp-!J3=Nk*6u@Z1cg_K#Wp/,]"/uJ>UF50WkXpEG?qNhQ?Sno2W/^APZn(lV,s/qqo/CpA::3Q!e<`j/QU?+2[C.
%2OSk\?KSM9_:lo.C6Id6Q9&CfhX*?iH8WQA;a(n5i#OZmlp=*bel>;]U=$]mI$mI*)6k31N$;0i0uAphI:QD/GC4QQP"(WkGSBm$
%$u33b#4beuqD'#+[onrG)/S%J9>(Yl@(T7]7[+,VCL92caX1S>:>2"?I)\_G-XW6f=p-18AWS4d6(1QY8X[TVl%tl-kh(?k@NPE=
%Nj/Jfe+ht7A!"e&o8>upN<%JhkV%qu;p9a?H>biYQ.mXPZ'^m#BbjF`D8AE\;Y9alOnh0e/ta;N$Y=N8-(o*I!n8rZP)U]%>EcAE
%/]r0ErK->S(*%b'=ftU15TS^eD%4HX*j4ma'PCPg+@'RF@:D%3o^dq/=;._P3=to<PPDb(%S19=Kq8WGMeJ+Nk?alaZ40Y/*+-la
%UkZk3<8P$M0$kQf.lgng`p/i$`NgPo_P^?nJ&^Th$]J(C^8T7X?WpRo+SM^`$#?Xi)_T@,Uo?kUcuc`XC)dJ'R;T8q5K8;k.ES`C
%M/7$ic[$QqP,+M7AJ40;q5B5$Ebr.53M6EaXo5ZNDUA9Ac-g"Yn'a2=j/6t/#E-X(i&0)_AE"(W&COBo7d@>uM6%Zl6'Al2Kb58/
%RD29(Q*,+EYR$LiEusE=*[Ai>S"R]Rj&h8o:eYVf`>9#-HNRH9P(I7"[bFVP\m;<?$o`-n(g[%;-qrq:Y@E0M,f5eD>Z])<.^7Be
%76#Ep2(eQZGn_ug8TXtl%eAGF+K`_"ooaQDf^$$Y,)+$2<qsg'*+:t-Y=KEHH565]BV&r/PE;YG)ur+K7m>Yg=nBH5pfY6,f;:7-
%le'XoU'363kkJ*U#83SthQ0G3hk].p8QV<T@[oto8ZQjgL-9(-FYN`;H7D+T,NOGJ=^5=O7Ul0TDf3#1jC+%'BSl+hj".YRF&sc$
%S*F3H;;Zis7);*60Yg67NfE_Xk#i?re5bkoRT:`VPW`,I<tmM_`oZ,?A/WH:)O<d%6qh6OPE.X#JOUE_6>k=VO%nrekt$,P/dne5
%ZWA$UES\q8h!c]5A,6E\'Vlh!rme*f6F76a87M1#bNX*lEl4C-Gj"=6.!W?@^ro%sokU/Uc)\U+7R3jmdu9)3l'MeOTg"tQ1,+0D
%UH]R7ms`JURB&gAKV*Zh6>5,rY,FdU9>5FED?XOmKHR=S#0s(A")sUJ_*%\3rKBHms,?\3-4"jbOAR>-3PqkgBHHWI8#W^NC#(Jo
%_7joUi='&`G;l_Q=BXkJ3L:T&XW4ZccrM]#HW/oOIePkknJ,2LP'p>Q_?_YUjFFWqpI,a_jFf!U7W*V7O!?R_UK].+)T72X==,+\
%g03\Im8Iii&.K1M;rh>NE3Ku/&//ben6>=E""T26np50s\2@?@9Ihnl:N-@=^Qa@l'4`5STj8J)41d'Pj>t"UbK9)r[an*_lY_VQ
%BZGeKTn#cN:Gdg>>0FN\m3!:C8*Ca8gEE$0"uH0I5C%u$0k(7@"OPCC9`.Bd"Hh2:ZHhqF]SSt8Hq.:k69":CAIXO&VDZ<;GMeSY
%,^6Q-gg`NrU.N*CU$D5_Qf@BI\&FXXF#e$,In#";V?I1R$N/:V8"ol,]r<s)Fn9&'/f4;alV.,@plbu>H%kbl5rsC)[V'Q^Z:-&,
%%5+dm=l"bMfqnHh:)f&'(n..DZu6OQQXTfN^=VXl*t>u*oTJ-T!OZd_HYf2%O]=-`75lVtO_NBp`hR9?Y*Nr0bGh3WeEG*IbaI+b
%`eX,YBa::WXOmUY8ppi3B4@tk83pi@%jM#[f4'^jn:6sBKk!"mNj1X#.uln^Dt2XT54=bLj"tdQNAT;C)m,E0'\]QV,np3-RSp61
%KaPdKIZ*5&`U2uc+CV/NZn1NG-OOfb:UW*APObZ=;O0iqTA=pghD?c_:ehO9l9U\!1T^S`X3+_+H*(AFLa<T3H^F23S7q@2/+9%B
%q&\_UZWLRTB9ONr*S;OC,AO3j#utBni9j]Om)l-[@RVaINME@pAV'(W<3cnP\,8X.4t0:L;Khpn@H-\p':DbL,^uibCp,m2Spo'-
%g!3m#KcV0I4PP][*t<>ANoiot7+lMGd(SNs_"rN+hQ)2SZ,N[76*8UQ]4qf^?31jHA5Y6\Z#]4AZZGI6AgYf/q@?f;/0F%]6:$!5
%b]gO_FSA3,_0bm#\\3i@\2IN$BKT,qDa)a;e(m7dbI%?`V`Lol)MZipbES.0.csj++lBA^Qc16AqFrnLF(cb6`DfNG3F!sJq@454
%mrH-c-Y5pV>B+7_&EU,N!R#``NN6=d(ETM7i-cE$@;?2_9\>t9bK4%Z'GaSOW9#3XZO=]),3.&4q*KOm7A+oMQeT,/o'6#o?!8cG
%<#U5U..;$_]iFWI7^JWu/oO9f1e[%1%?G;pA%\B8qr)\qqf_^Xs7H$X4+D'*J#!VSnK72up-8TKh5`d>nAF#Lrc%W3r:0H`ms]ER
%k54Usq"<JCp%G<YE'O,ZS"IRArYUc8OOX"#M9#RU8!!Ps3-">eO*6X]Ho:BK4!&dbpOA&2pnRH&$[m]K]4=^W6mYt3:]Za_;XK)Q
%q@<I5`"$\3,2$bPPu&Pc<Z`[pElBjiitcL)mqtuhJ@b^MOMTrDpd.`P=jWY-OtZJ,anPVL;:2Y+3L]f.PL88NqN;m$OqY%"MuW21
%hu3N2s3o^]IsCqJDr/2+qnN/\J+r7nr&0">A@/btVEB:oX/!#9rS^gt2+MX;I%S.H^V'O$DgqS=\Fa_>n[flM^\cij:N,j_npgN8
%O5Kp4p^dE&e%ZlPmJlVFnc-Yu^OMt#n%O;Cs8T:[rVl3!],`.<?2+:.hnB!IT3hQoGCTPhoiJC.A!QnaUAHhJ7pIXNamuM<jRp+a
%p%oif^OGq9\+OTef5uI:IF`Jj/c4A]rSoX14M:G2^\ch/IeW[ZUXB[V^O(DKS4g9T9)YuBTN(s,s/hpnL]@2In)+*6%r\)p`qcsp
%DYql&UbD(dgR#9Yrh?u1O89C$lMbul^A[N8IEd9;Dm+Y8rVlQW7rNk9_,$\@qCf%eqt7S15Q'-bn)&TPLHfDlRlBU#UMW1+mR!G,
%,976Ph6A&X:WM0[d5f85ee%8>T^rHGE#M\Ll84+!Ue%>S7n6T99m2&Gi.Y>!"ECGlIWI&e(-3uNq<f#PfV'&%jWTs&r*#No,Ie,q
%5^ng>Me/;0GN6-)3!)c7c4WmneR8.Z:?7;5bBF*tH_J(#mpE*Q;$DE5)?#.c7Y=+#4uDJORjmB=5P39m1PjgLDcjd")_eNWp3k6!
%61/F`@(!Z&]V4M9E%63cH/irQp$JW9Cc_0sR6*V,`ikjo53Je-kIKXCY3%e/&Z!b0=LW<E.G?j9oNc:Mo,@U^ZH8VZSU:us\fsL`
%HuFY`?u%WKmK-#DfAWEJ^jp)tM*P<<ZCm]GH\(oe]ud`ebr;3<4a1E`_YBXP)%iGN%O-DR9DPZKjKh<d`""uDk^U,Tq(nW6f9Q8@
%=7Y6`-,3GkpCYX4XG](16n(mO\oBjWYc<5uoR^DE2LHP.G-.#__fdXL-`.-Lj@hJW4C>]J=RoYJiZUT=r!X1hFahRQ'u/htoP9et
%iq9RSYi;X<kMRnGC,Q+(gci#,giVn><qI9O9F^NE(NekOeo,b!3HjZcmduI]$U:etO(U;lQg"5-AI]cq@`([PVUN3'%D?OtGgOaW
%2.W9.?X?rl;rufY=6.lR="kQgqGW_]\ifQ=`n/Y0gN^m6r-U;TI;sHfnHh35nJ+2GnHiJqI!NXfnFrlU^0qC6?<5mpa^1LsEmu\?
%^A3G^iEDVY?;MQ51oWgWHc*YW%$@&sUTZH\c/@ejVk<8pFOPE"`s-Qgf)a_m=mV2%U0aW2%r=FL=SJY#l@PS8KB$J<J/Z[gMF`Yl
%Rt2V\O6XlZ]t=c\.T&k:Q9jfnd0J!Zo^FDMECIKkcKXchF.Is^IWp*S+E)-i(uRK.74tAD"PIAoAFK*j19t!!-^8:;Z\e*%.MLF_
%,M(U5;->Ocd.j$L`H(<(`[D?:=gj/E4_S@oT?9mWf-3AjEGjhNFDBkeH>2I+c`K[N55*dQQP,l.)7HTZ`E"5431_EHjN/>D+66]N
%VCOW6VdpmT>X:RCb.X/!^UEX,Reh1Zr+K=t'j5u'FZ!BhB&a%pZQVai2Ut,E/F-2Dj&[qU5!t0Z;[_Ged6<hLGPX2p<RF&n4a'+M
%28-g&Vi(F.HcqK%iP0k],l.*9#"[[1Xb'9%^)A`DgZ%`'%N.>%i5B._?3d4'<RaMUHWpj"I/.?siplBoUc9jL]r'jFKd7cho6],&
%mTYTro?p&mh]=p9+=eqZ&+$7CnT.i)IR($f5S(5hDD)Uok3$nD.tO?h!R3aeWeL_,Pdr_)G:6/u^RZKV%?d$%>6@Bk@B36,)+C0W
%:idlo]u`^p/^5roqC<k[<pt!-j`mfl7&*4adT*_'3S4+Ej.)?q..pG?c.+k,*_o<ml8?Mk2L(aEXR6j?Ke4`lJ6Ch`Qj%Y#"`(s1
%+p4S+\nm,Df*.TZ`M8:;>B2$+b:HRIWRS9X#gM8U6*?>)_WUX@D@Q>*b;;(eg9\r63-3b%a%sA6-ZtNrnjd'cR?2?u3AV^t'GANP
%KJMR$\=d@Ojt$sR#,G4PD#:r:Nbu&#PZF8f+!CEt+OsqYUqSV[kp#:fb/:ffFfYBnW-lqR&tY<W$R%?g-50Kee5G)Uao2c,@sUD3
%P,70bm466h9YRmuUe^QM_?!jF(gAsb9C<at=tRE4<IRWj5]+a,!.B65leZ&In0&jcn*M>Q6UFb]J4f:hrnUY5*e`Ra%+#s8=iVG8
%D")GIp;cRl*#@Ve&"h.<&BtDWV3@*.K=neB+m7QB0!(F$"*ODtk'!"k")TAYb,t)V[-j3k3Da97_\9=U9BrmD4UJ=rlV]h@(@*j8
%KBD4GKA#&e+Y;!82gi!3XNA+#Sp"(iN_S2+C6L5O&#`Y/G)EZ?/50WD"LMtTdBD4*lK5H/Ee]i4])&6UrPE*jUsKm?J4feA8Ss-Z
%To;J:62)S&"GW?t2.<V#eMZZhq`oRA.)gu0.P%@P[)o)_q_k!W&0@P0UpfVBK;aS(*u>9k.rdRb"K0EOWC&L03E^Eq,c_p?iPe,(
%ClJ6,]]b<J`9:`WWCeo=d$t<01F0Uom@o:akjhEeCuY6,a(WYB@<STj6DefVQ$4$C.>uSZiqdI2TeHLIVtVB#eausC@$M^'*`B?$
%iuj=q06+20FJ,_Z-9W.40$onfP[n^5aF2/q:PLSe"EAD"J]PrEWhNC7F+P&s:&XXoSo-<8[&b5aDG:Nm*f>_`=DE'mO&VmmHUs&&
%Ko@R]/a$CROb?t"gXY)#qLC(QbE]sm(.+o`IT-=U:M(EHIS7^(lU^upM\GaugRJP7FS,eP<4(\tG,bdqn"W&FhnNR&T0-!.3$p*'
%*[/UCCfMajL%=>$kDg[9K"e#bS6dE2/6D]mBsa*#]0o2F8$E()q9n,D-`ns8<Q+D[GD6np^>DH4Sb>/6L1L#fe=Ac,1h,[\((U$U
%,8Ft%h59GedZB[cZRL64=BS'j,Ko?t(Fcd6f4!_#4;)q%pt"I_e@'JBR!`$BDJn2d]^cK!F9"n_BO]HK`!6V/0@Sak\FDF-eU_`j
%2mrX`F\YTSM#aRl2&`*dYkQH@gSN<C>E[o*n^inI%:t]n1QU76^#F&-aPOR]L41]<3Z*hXK`YFX<^J`Udr?Ed_Bth%LTHP%\"Vt;
%="!;'BHH&81ctdRX.H>j634RMH^gAC->'"!$`j#Y\,EDIk3&O@Gc.r<,Vr;lfRN"oT@"gg$+9.CGCakqit^r_5\NoAg02PkPr$@q
%lI`+^V`+:*iPB$OY?>h23,hb&b30*mCSB*6NCJR%m:P-#^G(oqCoJH&M?ta6fl)Z0DJHF&5\i6:?l$'Vl"g,YrZ4f*&\DMsD]K??
%>HqqhA"bnF#Dr64)\(I^?6=GI+?S`@<76EQI-FlQkAZJAg8JQ;]f3Ma'4de%.JJXOUQ$TKLeQ=JXS^]VNbn^-QHWXHXI0lM]C9*@
%MmZ(CpjS08WiN">J_$6nMHs5&WcTl#dS&8PFo/rM3__,aBl[L%9LQ-),<ah?Uun8s/u+3N8`SDR6/<g1P?aDjWRp^TfkXC1k^&o3
%QYFM'D=4s;*`VF&Z=+epR(kn6XuBB:/$@XY"r]9FV[s.$$Ib,b0AhWp8="\oYWnAF``KRq,D0ct/2/qPFdsb:GoPTZmu1k:%VIdO
%gl7h/5=,_VO!?0UZ_!gK8FIahiiJ)Q!W@58C]W(E(>9)lHbV.:e9&`">IUfHb`j[<Lp0t0lmdce#MV;18,agIE^l;.djKIAV[@dF
%%R1k)6iq-6m7_sp0A2A2lZ#Vb^]4#plQ=\4lq<#W5+,F$pl)Rf3>N;95Tfm4blR$<[B$RjP3%WpR+FFF'6\"$2)nL#3sjIV(GM.Q
%B3H^CcUVY+eV3SAAh!?aPF\XKhEoud!p#<G`(A(cGXWc6D"I)eO<JC"6nU*g=jWY-OtSY\5?SnRU%FOsUjdX2)2cj1LK\AUr7s_>
%YBYB7We`%fnQYN4P9_QJ9;lChSKB3s??nUArI@*;4s`fHc_ER.a?(,6=^mH<@IH>YpV2TuoDHZ,CLU65f)9lYV8';b^F=Zq':^*J
%-k<ES9LtIpUM,g!4jkTQ`<mobX`DW<8Ho6b<&gKBl=o7SAU.N;`oDkdTa\-GI!_^sn>)-h,6p&W:CsE+0j^JKWE[=P?;Y<#`(/B'
%3h+)uTlV^+K&58sH_L?YqZ#"=^YV/Z+4e#fnWZl*)4F)I><_k?%Q#"c7@c\%0k`%DT5giaa*%1)'ZWuNA2P@m[:`2H`TN<.@bh^d
%r8?Z-1:'Ap2X=\pB:h%UPeGd`l8d<]-VXIJd^A_;T/0d=9.#N,0ecsjEW>C&qs,6lVdeGV;-^f4-k2#(#SAG595IfIDqO,$?Ticg
%>"co87NRU,PQ=WC^QqW.a'cJ-$mUV.Xkc6Qp"O-RN8bKeS%pO(^>L^aT,uGRH/5"u'?HZ4EX0ZDAOCgESF.D%]l6<c17Yfb1I1;R
%XshMPliaU-MV:,p`R?VD,s5%[?T/.1Cu*-e`g$dM5W*]J05h?QOkKWE3M7#*qs].5+D&$!m<N45=/P=Jq`4[kk(%)'h-]>q5Ei1L
%g[T.Ni;.n]#ic=Ce;$8r_`33&-o[dI6V$1LjUCMm)Vc3qI+-p9fALd:DnA2U+h%RC6LUNtpAHckmU&`\AB.PFO"H!;hl3N1n:!tW
%<#YsN+Va?LBV4!BkUgsgVY1s"Vr@@&\Y;JTdA0#**3+L5Vd(;_aIAY3#5HL%nP\t#DaHB?`+l:O)^*,9h\AON]p,mQ/AR:;Ek+:1
%r8gWp=4B1inU>0j92?N]X+-_1(Bn*:LRjq/Qs+8Uk=4n\oc,L\XQDZ3Vrk[eQfc!\ghNSLA'`DH.H.7OV=ZOgpMNM,>>TRb<N4b=
%Q,n@Ek50b9?,YOVh(;7pqVCBJf-YrG=ara^n*Q&"dmohUi@aGY$`^'k,=d?8$`3\iRurl,5k,0?A1WD!cY/)B2t'L+GLUG[H$+H$
%Jo3)cU%_?Kr*,8.^G`2[2GHR!1d_Q+&f$G3jL/$lKi6mMZu?EbrIf?aO%*8?1PJV":q`grS5BF*0WM_`*<&4D(?4u=5i1:\0Yhl:
%9<j(Uge1Dqf]'!(5(8F^@hHD'0$qW.g%G*BW2'u#O1;jij3%4V88F<pT66OINN?'A]g$2k#%=ak]XH,OFYJ5Xj:cWMj:f*Cq>,05
%TrsG>2tEeuk=1bZANi%.<p>ciKqje+^9<XK;>lJ\;$>WXEV/aRB!_ZNrUPn_.mL&9^PGJMqJHp_XK.>e[71q32MP%m:13P_*)f-j
%Y5Si0$\,+3Y:.i/N<W\'#-A/gh!(dG\o!XbhEP02D_l9[7$EW$mpUDK3MJsTK^!rWd<hY)VHbOr2F]s;r]NUojEN)a!A"/hk?k9W
%e/DMO%Hu>Z&Hf^*g3o-5\XgW\F(d0:\Uddi:>dVol.=Le4g(1`P:Rbci15+CT4]'!()rd]?e2=ING_Ym\Y+!2WHR]\%W=u:0h-oP
%=eFQbT_!*)$k=rn9jXLH[d[q!I"6f:b7q=/KG1ri5jQoeC="P`1=Gp$lSiAn,UYI:=InpjO^B5I\n"*F:lV)60m1AA`.kD9X?1cr
%M"_#bY397FIVcITqjL1q'@a34@X\cD*)N%hrl8hC$iM>0G75'oS?QhgcuUQd+m1F,3-VQq5g>'a[6rrJ-,LGddL_ICm*#PWoq9G'
%O<g/Ng+n4O.6RBOMrrg41QQ+`0GNYo=IqKtL8S1u(NdsI"fUC^8(pe3HCZYcm'peSF(4rSmi?js*;`UG+Z>J0ji]U4+T##2FY#:L
%p<=lTa7"$JF#!UV@pL;XM9JaVdJN-dqID6-:f\>E:p/3._m`FSR8n#>eYsc\Sg9"aM&k#:`lCWO;4o?j*0;q>U;jMq5`,dBh+bW<
%NK31fidN&JG`nD$9</.@c2OAAmV85miq6OZZ+%6PW225/fU\-SeCL(]R'P_T'8DeiQ=-.4o;!Z'U^E_GYC)\*AS4@VA6O+kiMNWT
%R]a;;CFJIhbPV.sc(bs;>OgQMM9cq:TS6^@29<DL(CBUgD;h'e=NR(160>t@U"Tol1Bg`&%@'[r-W*/,W'G*$cd;A`d',_GFRSSA
%O+s(.G2PhW6G']3dMRE?a/!c`BQFD0@@RYRM\:5qg;_s3a)#A_P:)Ze#riZBf>C/p92Qc+g'CO_&\c)XpeI[$]S_cfZN2L((E^+)
%M(tY4gC0/#4eON/JU"fn@>V?k$_d.:cCgkK2PdkNNHPU<JN=$JPB'HFcm0.Um_uen$n:Sr`5e83S&M2]e?"?2.S>g),-+4q2I:ue
%Ff:.q\ri$S[1(s)jn4^o&?m;'`5eq#8)fg&[B-q:]&7\MA/Aa%@@5lj6Bge&$ctj06`_0+CR)<%9RFpNONDu'H^(d'8lUthHaT2@
%/t,Y6csHX!7BT3RH'6uaIu/9/kuOs8O!:;JY2g6&l-?A0Z(,XmM7!qCI9h!#,=@1_<VU^i0XQr,3l9"C0iRL0McucZqYI0g*jjeI
%Nut[&k//)-o'l.2=&.%-Ja0E7"%%SZW+=-TLd%%A+(lq#</b^?pP#+3e6%Ye0>d;MqD2Bs,4Sn[Z)?*bY+]+B8@hgC&?u@7U+"A7
%O+F[VCeM4V-ID?`N$m7*,aAK]mM\p8UeDgCa#4#?AN7kQZ\>[^d@r$D,]FJdl'Oi.>TipNWj/>OUW3Q)qU-7d9%70NDJYe?,tCqm
%e?h`;?$TQD[k773I/jWu9p`I/i*K&h@[a-acm^?/4l#B\V?2b#:je5JYmR<6<](]c?F8"c47VE<EB'u$:qDmJiYi9eW<2?Y&)<:>
%oJ6Oep?<NsFVsQ(fKcW3!+"Ch=a")<UN&$uY@48F!Mqs-82[\$h,_6>)ZAAnWU(e_5a@S-or'c_On+,sOXGG29Go4'>NX>FXMbN-
%GlhYr3\oHD\a0>e>j&fW[Fu][c\m!t4^Br^nfCa8^e-tL2%.A%02gaojKM5(ZuRXH.ZqY.p'Ihs->Ys8>AKEC+^#Y9+[GkS3M8FM
%BpJPh?:m4He"\56=*q%4PR[p4XUTqJ\Z?3L;8s`C_Xh`JM54`F?jiEC?"Z1AS_d!'aCMe/8[[d6.$6.ag2+[+8mi:c;e/!qC[,>^
%^3l-(89(?sNhq-1fiY6'$^HpNo9Y#Ip^gu.H(`m)HJ=kV<)%`Wdi6\_O,OKMTX)36>'E?X2_`f4GH[,@[?DW&A)4e7Woa2b2:9:N
%$5tLXd@E-S2+$["KJA55Oj<@?7ON2%TXald'8Xtd7.Rfb]LH14TR.I%^6f<_#+&40<7HO=I86Pc\Qr6em,:nmm3*I>/!HYa6>:-R
%?raMH,!pD0.8-V^!mBG?'u.nd2X3"4=.bkCpaNTfCpV-?AFAMt`Nc:Q4:.4M!aQ'[=68F\<(,Z;AfQq]]%&A(U3j-[=X;/4k?AhB
%lF%0d2d?=4S-U;AV/sPImV$pJ)tRP"D"/\Pr1+:K[#H]&/R.s:`#.JM)7clXc_.H,:k=nl"e=%ZF4TA/=Ki#DFbc7hdCcq+R5a4U
%gE"g,63p6+hnqcAN6Nh0$,,Cg<q^Lc1-1Y'7:DsTjZRn%EndH[A2Yn]KliNaWf]Edj.\Pneb"nN]G),NJTfgukR0nA%e7/#XQ??-
%HcWg[>Q,[lT]JChqj'<0MShDjXPO1#WHs+rc(XGaFq6nlIBOD^k+LI6kBM^=)uY+_f+F3k1GlLCVqOVMAT;W-Nc-!]5%iVt0%JXj
%.&[cQ"?P8K#F(d(%@WjBUfc4<Ma1VH'D`fk_EcK9PdIlGk8*e5gS?eRfZA]I>1=LQ[Z.nGME?lrGDXefE3@:iF4[=:HoBM.TtFOB
%WUO`qoD%(KZs=\m=(R*ue[`[A1sJZh7e+;aAu3A_mfVB`:nST8J_3W?+fL]<%%FRnCs\^CnueP.UI$@98D/1]hDDYP*S^tE^%"?"
%V*W:`CugJ_h'Ibo8$GieMo5E<OTCj9k/J"`fR.Jc*XnuV@Lcps*ASrd2$rc@Cro#2i@.ITE:64Z!@VuDq6@WPXiGAm9g-lokisLW
%Vq\9$5H;06.2\8hJnA@CS*(PERaB@`o#gp.hB+T$8,L(r!ot.F)&1IBF=]89e>e,3-^7=W68n:M;.<BmG6]$E"=#BuNkr<bYAC>C
%"Yja&]NN1t?RW[f6$U/T*VG-IF3!s8',7:j04*"*nom%V<.[.TBU=L1!"*`q9Ha8i[G1f&/'%OhH`r]RH,/H$r91]O0+p#mr>D3]
%T-g<WCTr:b(Aa>Uar0]RpimhtFXJ=&+l_Rl-)2fHAtMR_eS,/kiTK=)4o57eRCMtWkBo?HC;Ki=6\Ti[bdD)up0S]:hjT](a%*&m
%;Q6(IFt(kf@EHgrN@'j[Ime"<pf?6J)%mj_q\JADqlqS]1-q,efVpFt2O$8.%YQB&`0"Pnj)rq!;KH[*_,J,/%S9G%lMW-MZ0!B_
%I@-e0aJ9:&T6U4EkA1XCr,#RbV)W&D_b(dY[cEBsEr4h6VN,NQ(9YcB?96r/&Sc59l6*@S,h.rn<OcO5SRk*W&1I0/P2K6oib]c#
%rAefnj]nTT#i1p]pu/H-i-""-,U_4JH;BY^@`'@V[*]T^1n/l7l3$\KmllLpI&tXkZe]R=jWKb!48*,inr./=4nb>P0HR<HghtdJ
%JVPm6d7i@<]Ed+:G)ADI3))AgV*B3ca$9Hkp\82!+9q8=ei]NO`M`H"[ippc6M[]Pg;:p%)^1k\7K&XU9q1-g=HFU4aQtL'_iarT
%kg=1!et](%+3HtX;A_?tbs5*@\n(thjY(%s*fIj]KCs>W4r:Eb&#;Kf8r/gn(=5n^>5!TW<($XBQ`9;2c"RG]1_,IqW`?e<7msbd
%Je[Z=-V%?(n/(@Qm3KVj$mP[o[DeX%:QD\JKs?srobfMHHLt/GJG,l+i]U8_eV,_^6^:ms@78r@=R8KhF08@Wil>95T9Q'o_95qb
%(i#p*+Yu-'JJkm,qc&l0$^[)EJ3r_P>H!`6Nc]/tJCNT1FpiE"GY."MdU@=Bb4'*<H9a(DW;`>>2o!G"fXeZD2<MXIJ^,=o`pqOM
%b/?da(J89KW2A)h,<8[1[.FaK^/0o&V66BedF[l(Ia_AJM)Q[3JAQUQ)>a`ja=-#srIcZuX=,W]2Oq5fT$M09'=qZW?1-!&[lZiq
%IVqESDT`lq`nn!F*=E$c>OJDES=s_4DG_/Gr,_CK:XmYP[`d9K?:PSO>XSqrH\5o;/.eUnqEfuqYu(SVZhB5PWLANu&[:r%#WpOA
%2,poa+b-2g#lt4.`l_l)L`D%>'oJY$5t=A*($A:'0E?t/c?b:,8N4M=dicq5'4VR"9ND`lHH=1t.WNkkb2q4:EJS#Pd<ZGtS^n_I
%ednVA9GULF_JYWJ[;k^"iKDGk(REVRC(TQZ;OS3!mL^M'DI.BVMp<'D0&3ma>N`IioARu7ru[;Elp(DXrVulGGJCkArR9LCIdr<u
%pm_<WqDW?mq1mS:4-mb`p>>f1pTK'oHh[BKn(:+ErKlP/h>QJk\%hs\pHQ=(qu(HJs'Ho(FLg@KroQHDhuEN0rgWos=*B[n~>
%AI9_PrivateDataEnd
